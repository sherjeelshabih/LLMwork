{
    "name": "PerovskiteSolarCell",
    "label": "Perovskite Solar Cell",
    "description": "This schema is adapted to map the data in the [Perovskite Solar Cell Database Project](https://www.perovskitedatabase.com/). The descriptions in the quantities\nrepresent the instructions given to the user who manually curated the data.",
    "sub_sections": [
        {
            "name": "ref",
            "sub_section": {
                "name": "Ref",
                "description": "Information about the source of the data. It describes who curated the data, the journal in which the data was published,\nthe DOI number of the publication, the lead author and the publication date.",
                "quantities": [
                    {
                        "name": "internal_sample_id",
                        "description": "This is your own unique cell identifier. With this text string alone, you should be able to identify this cell in your own internal data management system.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "free_text_comment",
                        "description": "This could be anything given additional description to the cell that is not captured by any other field.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "ID",
                        "description": "",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "int64"
                        },
                        "shape": []
                    },
                    {
                        "name": "ID_temp",
                        "description": "",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "int64"
                        },
                        "shape": []
                    },
                    {
                        "name": "name_of_person_entering_the_data",
                        "description": "Your name.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "data_entered_by_author",
                        "description": "TRUE if you how enter the data also was involved in making the device or if you are a co-author of the paper where the data is presented.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "DOI_number",
                        "description": "The DOI number referring to the published paper or dataset where the data can be found. If the data is unpublished, enter \u201cUnpublished\u201d\nExamples:\n10.1021/jp5126624\n10.1016/j.electacta.2017.06.032\nUnpublished",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lead_author",
                        "description": "The surname of the first author. If several authors, end with et al. If the DOI number is given correctly, this will be extracted automatically from www.crossref.org",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "publication_date",
                        "description": "Publication date. If the DOI number is given correctly, this will be extracted automatically from www.crossref.org",
                        "type": {
                            "type_kind": "custom",
                            "type_data": "nomad.metainfo.metainfo._Datetime"
                        },
                        "shape": []
                    },
                    {
                        "name": "journal",
                        "description": "nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "part_of_initial_dataset",
                        "description": "nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "original_filename_data_upload",
                        "description": "nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    }
                ],
                "sub_sections": []
            }
        },
        {
            "name": "cell",
            "sub_section": {
                "name": "Cell",
                "description": "General information about the solar cell. It includes information about the device area, the layer stack sequence and the device architecture.",
                "quantities": [
                    {
                        "name": "stack_sequence",
                        "description": "The stack sequence describing the cell. Use the following formatting guidelines\n- Start with the substrate to the left and list the materials in each layer of the device\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- If two materials, e.g. A and B, are mixed in one layer, list the materials in alphabetic order and separate them with  semicolons, as in (A; B)\n- The perovskite layer is stated as \u201cPerovskite\u201d, regardless of composition, mixtures, dimensionality etc. There are plenty of other fields specifically targeting the perovskite.\n- If a material is doped, or have an additive, state the pure material here and specify the doping in the columns specifically targeting the doping of those layers.\n- There is no sharp well-defined boundary between a when a material is best considered as doped to when it is best considered as a mixture of two materials. When in doubt if your material is doped or a mixture, use the notation that best capture the metaphysical essence of the situation\n- Use common abbreviations when possible but spell it out when there is risk for confusion. For consistency, please pay attention to the abbreviation specified under the headline Abbreviations found earlier in this document.\n- There are several thousand stack sequences described in the literature. Try to find your one in the list of alternatives in the data template. If it is not there (i.e. you may have done something new) define a new stack sequence according to the instructions.\nExampleBelow are the 16 most common device stacks which represent close to half of all reported devices.\nSLG | FTO | TiO2-c | TiO2-mp | Perovskite | Spiro-MeOTAD | Au\nSLG | FTO | TiO2-c | Perovskite | Spiro-MeOTAD | Au\nSLG | FTO | TiO2-c | TiO2-mp | Perovskite | Spiro-MeOTAD | Ag\nSLG | FTO | TiO2-c | Perovskite | Spiro-MeOTAD | Ag\nSLG | ITO | PEDOT:PSS | Perovskite | PCBM-60 | Al\nSLG | ITO | PEDOT:PSS | Perovskite | PCBM-60 | BCP | Ag\nSLG | ITO | PEDOT:PSS | Perovskite | PCBM-60 | Ag\nSLG | FTO | TiO2-c | TiO2-mp | Perovskite | Carbon\nSLG | FTO | TiO2-c | TiO2-mp | ZrO2-mp | Perovskite | Carbon\nSLG | FTO | SnO2-c | Perovskite | Spiro-MeOTAD | Au\nSLG | ITO | SnO2-np | Perovskite | Spiro-MeOTAD | Au\nSLG | ITO | PEDOT:PSS | Perovskite | C60 | BCP | Ag\nSLG | ITO | TiO2-c | Perovskite | Spiro-MeOTAD | Au\nSLG | FTO | TiO2-c | TiO2-mp | Perovskite | PTAA | Au\nSLG | FTO | SnO2-np | Perovskite | Spiro-MeOTAD | Au\nSLG | ITO | NiO-c | Perovskite | PCBM-60 | BCP | Ag",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "area_total",
                        "description": "The total cell area in cm2. The total area is defined as the area that would provide photovoltaic performance when illuminated without any shading, i.e. in practice the geometric overlap between the top and bottom contact.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "centimeter ** 2"
                    },
                    {
                        "name": "area_measured",
                        "description": "The effective area of the cell during IV and stability measurements under illumination. If measured with a mask, this corresponds to the area of the hole in the mask. Otherwise this area is the same as the total cell area.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "centimeter ** 2"
                    },
                    {
                        "name": "number_of_cells_per_substrate",
                        "description": "The number of individual solar cells, or pixels, on the substrate on which the reported cell is made",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "int64"
                        },
                        "shape": []
                    },
                    {
                        "name": "architecture",
                        "description": "The cell architecture with respect to the direction of current flow and the order in which layers are deposited. The two most common are nip (also referred to as normal) and pin (also referred to as inverted) but there are also a few others, e.g. Back contacted\n- nip architecture means that the electrons are collected at the substrate side. The typical example is when a TiO2 electron selective contact is deposited between the perovskite and the substrate (e.g. SLG | FTO | TiO2-c |Perovskite | \u2026)\n- pin architecture means that it instead is the holes that are collected at the substrate side. The typical example is when a PEDOT:PSS hole selective contact is deposited between the perovskite and the substrate (e.g. SLG | FTO | PEDOT:PSS |Perovskite | \u2026)",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "flexible",
                        "description": "TRUE if the cell flexible and bendable.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "flexible_min_bending_radius",
                        "description": "The maximum bending radius possible without degrading the cells performance",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "centimeter"
                    },
                    {
                        "name": "semitransparent",
                        "description": "TRUE if the cell is semi-transparent, which usually is the case when there are no thick completely covering metal electrodes.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "semitransparent_AVT",
                        "description": "The average visible transmittance in the wavelength range stated in the next field",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": []
                    },
                    {
                        "name": "semitransparent_wavelength_range",
                        "description": "the wavelength range under which the average visible transmittance is determined\nExample:\n400; 720\n350; 770",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "semitransparent_raw_data",
                        "description": "A link to where the data file for the measurement is stored\n- This is a beta feature. The plan is to create a file repository where the raw files for stability data can be stored and disseminated. With the link and associated protocols, it should be possible to programmatically access and analyse the raw data.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    }
                ],
                "sub_sections": []
            }
        },
        {
            "name": "module",
            "sub_section": {
                "name": "Module",
                "description": "Specific section containing information if the reported device is a module.",
                "quantities": [
                    {
                        "name": "Module",
                        "description": "TRUE if the cell is a module composed of connected individual sub cells",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "number_of_cells_in_module",
                        "description": "The number of cells in the module",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "int64"
                        },
                        "shape": []
                    },
                    {
                        "name": "area_total",
                        "description": "The total area of the module in cm2. This includes scribes, contacts, boundaries, etc. and represent the module\u2019s geometrical footprint.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "centimeter ** 2"
                    },
                    {
                        "name": "area_effective",
                        "description": "The active area of the module in cm2.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "centimeter ** 2"
                    },
                    {
                        "name": "JV_data_recalculated_per_cell",
                        "description": "The preferred way to report IV data for modules is to recalculate the IV data to average data per sub-cells in the module. That simplifies downstream comparisons, and it ensures that there is no erroneous transformation that otherwise may occur when error checking the IV data. Mark this as TRUE if the conversation is done.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    }
                ],
                "sub_sections": []
            }
        },
        {
            "name": "substrate",
            "sub_section": {
                "name": "Substrate",
                "description": "Information about the substrate used in the device. It describes the `substrate stack sequence`, the `substrate area`, the `substrate thickness`, and its provenance or fabrication method.",
                "quantities": [
                    {
                        "name": "stack_sequence",
                        "description": "The stack sequence describing the substrate.\n- With the substrate, we refer to any layer below the electron transport layer in a nip-device, and any layer below the hole transport layer in a pin-device.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- If two materials, e.g. A and B, are mixed in one layer, list the materials in alphabetic order and separate them with semicolons, as in (A; B)\n- Use common abbreviations when appropriate but spell it out if risk for confusion.\n- There are a lot of stack sequences described in the literature. Try to find your one in the list. If it is not there (i.e. you may have done something new) define a new stack sequence according to the instructions.\nExampleBelow are some of the most common substrates\nSLG | FTO\nSLG | ITO\nPET | ITO\nPEN | ITO\nSLG | AZO\nPET | IZO",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "thickness",
                        "description": "A list of thicknesses of the individual layers in the stack. Use the following guidelines\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- The layers must line up with the previous filed.\n- State thicknesses in nm\n- Every layer in the stack have a thickness. If it is unknown, state this as \u2018nan\u2019\n- If there are uncertainties, state the best estimate, e.g write 100 and not 90-110\n- If you only know the total thickness, e.g. you have a 2 mm thick commercial FTO substrate and you do not know how thick the FTO layer is, state that as \u20182 | nan\u2019\nExample\n2.2 | 0.1\n2 | nan\nnan | nan | nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "area",
                        "description": "The total area in cm2 of the substrate over which the perovskite is deposited. This may be significantly larger than the cell area",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "centimeter ** 2"
                    },
                    {
                        "name": "supplier",
                        "description": ". The supplier of the substrate.\n- Most substrates in the perovskite field are bought commercially, but if it is made in the lab, state this as \u201clab made\u201d\n- If the supplier is unknown, stat that as\u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample:\nLab made\nNGO\nPilkington",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "brand_name",
                        "description": ". The specific brand name of the substrate. e.g NGO11, TEC15, etc.\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_procedure",
                        "description": ". A list of the deposition procedures for the substrate\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- Make sure that you describe as many layers as there are layers in the stack. Otherwise it will be difficult to interpret which layer the deposition procedure is referring to. It should thus be as many vertical bars in this field as when describing the substrate stack.\n- When more than one reaction step, separate them by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If the deposition procedure for a layer unknown, state that as\u2018Unknown\u2019\n- If a substrate is bought commercially and you do not know, indicate this by the label \u201cCommercial\u201d\n- This category was included after the initial project release wherefor the list of reported purities are short, so be prepared to expand on the given list of alternatives in the extraction protocol.\nExample\nCommercial | Commercial\nCommercial | Sputtered >> Sputtered\nCommercial | ALD",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "surface_roughness_rms",
                        "description": "The root mean square value (RMS) of the surface roughness expressed in nm\n- If not known, leave this field blank",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "nanometer"
                    },
                    {
                        "name": "etching_procedure",
                        "description": ". For the most common substrates, i.e. FTO and ITO it is common that part of the conductive layer is removed before perovskite deposition. State the method by which it was removed\n- If there is more than one cleaning step involved, separate the steps by a double forward angel bracket (\u2018 >> \u2018)\n- This category was included after the initial project release wherefor the list of reported purities are short, so be prepared to expand on the given list of alternatives in the extraction protocol.\nExample\nZn-powder; HCl >> Mecanical scrubbing\nLaser etching",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "cleaning_procedure",
                        "description": ". The schematic cleaning sequence of the substrate. The Extraction protocol does not capture the fine details in the cleaning procedures, e.g. times, temperatures, etc. but state the general sequence. Refers to the cleaning of the entire substrate before the deposition of the rest of the cell stack starts.\n- If there is more than one cleaning step involved, separate the steps by a double forward angel bracket (\u2018 >> \u2018)\n- If more than one procedure is occurring simultaneously, e.g. Soap washing an ultrasonic bath, separate simultaneously occurring steps with a semicolon.\n- This category was included after the initial project release wherefor the list of reported purities are short, so be prepared to expand on the given list of alternatives in the extraction protocol.\nExample\nHelmanex >> Ultrasonic bath >> Ethanol >> Ultrasonic bath >> Acetone >> UV-ozone\nPiranha solutionion\nPiranha solutionion >> UV-ozone\nSoap\nSoap >> Ultrasonic bath\nSoap >> Ultrasonic bath >> Ethanol; Ultrasonic bath >> Acetone >> UV-ozone\nSoap >> Ultrasonic bath >> UV-ozone\nUnknown",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    }
                ],
                "sub_sections": []
            }
        },
        {
            "name": "etl",
            "sub_section": {
                "name": "ETL",
                "description": "A section to describe information related to the Electron Transport Layer (**ETL**).",
                "quantities": [
                    {
                        "name": "stack_sequence",
                        "description": "The stack sequence describing the electron transport layer. Use the following formatting guidelines\n- With the ETL, we refer to any layer between the substrate and the perovskite in a nip-device, and any layer between the perovskite and the back contact in a pin-device.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- If two materials, e.g. A and B, are mixed in one layer, list the materials in alphabetic order and separate them with semicolons, as in (A; B)\n- If no electron transport layer, state that as \u2018non\u2019\n- Use common abbreviations when appropriate but spell it out if risk for confusion.\n- If a material is doped, or have an additive, state the pure material here and specify the doping in the columns specifically targeting the doping of those layers.\n- There is no sharp well-defined boundary between when a material is best considered as doped or as a mixture of two materials. When in doubt if your material is best described as doped or as a mixture, use the notation that best capture the metaphysical essence of the situation.\n- There are a lot of stack sequences described in the literature. Try to find your one in the list. If it is not there (i.e. you may have done something new) define a new stack sequence according to the instructions.\nExampleBelow are some of the most common electron transport layers\nTiO2-c | TiO2-mp\nTiO2-c\nPCBM-60\nPCBM-60 | BCP\nSnO2-np\nC60 | BCP\nSnO2-c\nTiO2-c | TiO2-mp | ZrO2-mp\nZnO-c\nPCBM-60 | C60 | BCP\nPCBM-60 | LiF",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "thickness",
                        "description": "A list of thicknesses of the individual layers in the stack. Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- The layers must line up with the previous filed.\n- State thicknesses in nm\n- Every layer in the stack have a thickness. If it is unknown, state this as \u2018nan\u2019\n- If there are uncertainties, state the best estimate, e.g write 100 and not 90-110\nExample\n200\nnan |250\n100 | 5 | 8",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "additives_compounds",
                        "description": "List of the dopants and additives that are in each layer of the ETL-stack\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- The layers must line up with the previous fields.\n- If several dopants/additives, e.g. A and B, are present in one layer, list the dopants/additives in alphabetic order and separate them with semicolons, as in (A; B)\n- If no dopants/additives, state that as \u201cUndoped\u201d\n- If the doping situation is unknown, stat that as\u2018Unknown\u2019\nExample\nUndoped | Li-TFSI\nTiCl4\nNb\nUndoped | Undoped | Undoped",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "additives_concentrations",
                        "description": "The concentration of the dopants/additives.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- If more than one dopant/additive in the layer, e.g. A and B, separate the concentration for each dopant/additive with semicolons, as in (A; B)\n- For each dopant/additive in the layer, state the concentration.\n- The order of the dopants/additives must be the same as in the previous filed.\n- For layers with no dopants/additives, state this as \u2018none\u2019\n- When concentrations are unknown, state that as \u2018nan\u2019\n- Concentrations can be stated in different units suited for different situations. Therefore, specify the unit used.\n- The preferred way to state the concentration of a dopant/additive is to refer to the amount in the final product, i.e. the material in the layer. When possible, use on the preferred units\no wt%, mol%, vol%, ppt, ppm, ppb\n- When the concentration of the dopant/additive in the final product is unknown, but where the concentration of the dopant/additive in the solution is known, state that concentration instead. When possible, use on the preferred units\no M, mM, molal; g/ml, mg/ml, \u00b5g/ml\n- For values with uncertainties, state the best estimate, e.g write 4 wt% and not 3-5 wt%.\nExample\n4 wt%\n5 vol%; nan | 10 mg/ml\n0.3 mol% | 2 mol%; 0.2 wt% | 0.3 M",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_procedure",
                        "description": "The deposition procedures for the ETL stack.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate them by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- Thermal annealing is generally not considered as an individual reaction step. The philosophy behind this is that every deposition step has a thermal history, which is specified in a separate filed. In exceptional cases with thermal annealing procedures clearly disconnected from other procedures, state \u2018Thermal annealing\u2019 as a separate reaction step.\n- Please read the instructions under \u201cPerovskite. Deposition. Procedure\u201d for descriptions and distinctions between common deposition procedures and how they should be labelled for consistency in the database.\nExample\nSpin-coating\nSpin-coating | Spin-coating\nSpray-pyrolys | Spin-coating\nEvaporation | Evaporation\nSpin-coating | Evaporation\nCBD\nSpray-pyrolys\nSpin-coating | Evaporation | Evaporation\nSpray-pyrolys >> CBD | Spin-coating >> CBD",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_aggregation_state_of_reactants",
                        "description": "The physical state of the reactants\n- The three basic categories are Solid/Liquid/Gas\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the aggregation state associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- Most cases are clear cut, e.g. spin-coating involves species in solution and evaporation involves species in gas phase. For less clear-cut cases, consider where the reaction really is happening as in:\no For a spray-coating procedure, it is droplets of liquid that enters the substrate (thus a liquid phase reaction)\no For sputtering and thermal evaporation, it is species in gas phase that reaches the substrate (thus a gas phase reaction)\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nLiquid\nGas | Liquid\nLiquid | Liquid >> Liquid",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_synthesis_atmosphere",
                        "description": "The synthesis atmosphere\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the atmospheres associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- If the synthesis atmosphere is a mixture of different gases, e.g. A and B, list the gases in alphabetic order and separate them with semicolons, as in (A; B)\n- \u201cDry air\u201d represent air with low relative humidity but where the relative humidity is not known\n- \u201cAmbient\u201d represent air where the relative humidity is not known. For ambient conditions where the relative humidity is known, state this as \u201cAir\u201d\n- \u201cVacuum\u201d (of unspecified pressure) is for this purpose considered as an atmospheric gas\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nN2\nVacuum | N2\nAir | Ar; H2O >> Ar",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_synthesis_atmosphere_pressure_total",
                        "description": "The total pressure during each synthesis step\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the pressures associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- Pressures can be stated in different units suited for different situations. Therefore, specify the unit. The preferred units are:\no atm, bar, mbar, mmHg, Pa, torr, psi\n- If a pressure is not known, stat that as \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 100 pa and not 80-120 pa.\nExample\n1 atm\n0.002 torr | 10000 Pa\n1 atm >> 1 atm | nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_synthesis_atmosphere_pressure_partial",
                        "description": "The partial pressures for the gases present during each reaction step.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the pressures associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- If the synthesis atmosphere is a mixture of different gases, e.g. A and B, list the partial pressures and separate them with semicolons, as in (A; B). The list of partial pressures must line up with the gases they describe.\n- In cases where no gas mixtures are used, this field will be the same as the previous filed.\nExample\n1 atm\n0.002 torr | 10000 Pa\nnan >> 0.99 atm; 0.01 atm | 1 atm",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_synthesis_atmosphere_relative_humidity",
                        "description": "The relative humidity during each deposition step\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the relative humidity associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns\n- If the relative humidity for a step is not known, stat that as \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 35 and not 30-40.\nExample\n35\n0 | 20\n25 >> 25 | 0",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_solvents",
                        "description": "The solvents used in each deposition procedure for each layer in the stack\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the solvents associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solvent is a mixture of different solvents, e.g. A and B, list the solvents in alphabetic order and separate them with semicolons, as in (A; B)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- For non-liquid processes with no solvents, state the solvent as \u2018none\u2019\n- If the solvent is not known, state this as \u2018Unknown\u2019\n- Use common abbreviations when appropriate but spell it out when risk for confusion\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nDMF\nAcetonitil; Ethanol | Ethanol\nNone | Chlorobenzene\nH2O >> H2O | Methanol",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_solvents_mixing_ratios",
                        "description": "The mixing ratios for mixed solvents\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the solvent mixing ratios associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- For pure solvents, state the mixing ratio as 1\n- For non-solvent processes, state the mixing ratio as 1\n- For unknown mixing ratios, state the mixing ratio as \u2018nan\u2019\n- For solvent mixtures, i.e. A and B, state the mixing ratios by using semicolons, as in (VA; VB)\n- The preferred metrics is the volume ratios. If that is not available, mass or mol ratios can be used instead, but it the analysis the mixing ratios will be assumed to be based on volumes.\nExample\n9; 0.6; 0.4 | 1\n1 >> 1 | 1\n9; 1 | 3; 2",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_solvents_supplier",
                        "description": "The suppliers of all the solvents.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the solvent suppliers associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solvent is a mixture of different solvents, e.g. A and B, list the associated suppliers and separate them with semicolons, as in (A; B)\n- The number and order of layers, reaction steps, and solvents must line up with the previous columns.\n- For non-liquid processes with no solvents, mark the supplier as \u2018none\u2019\n- If the supplier for a solvent is unknown, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nSigma Aldrich\nSigma Aldrich; Fisher | Acros\nnone >> Sigma Aldrich; Sigma Aldrich | Unknown",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_solvents_purity",
                        "description": "The purity of the solvents used.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the solvent purities associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solvent is a mixture of different solvents, e.g. A and B, list the associated purities and separate them with semicolons, as in (A; B)\n- The number and order of layers, reaction steps, and solvents must line up with the previous columns.\n- Use standard nomenclature for purities, e.g. pro analysis, puris, extra dry, etc.\n- For non-liquid processes with no solvents, state the purity as \u2018none\u2019\n- If the purity for a solvent is not known, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nPro analysis\nPuris; Puris| Tecnical\nnone >> Pro analysis; Pro analysis | Unknown",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_reaction_solutions_compounds",
                        "description": "The non-solvent precursor chemicals used in each reaction step\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the non-solvent chemicals associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solution contains several compounds, e.g. A and B, list the associated compounds in alphabetic order and separate them with semicolons, as in (A; B)\n- Note that also dopants/additives should be included\n- When several precursor solutions are made and mixed before the reaction step, it is the properties of the final mixture used in the reaction we here describe.\n- The number and order of layers and reaction steps must line up with the previous columns.\n- For gas phase reactions, state the reaction gases as if they were in solution.\n- For solid-state reactions, state the compounds as if they were in solution.\n- For reaction steps involving only pure solvents, state this as \u2018none\u2019\n- If the compounds for a deposition step is not known, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nTitanium diisopropoxide bis(acetylacetonate) | TiO2-np\nC60 | BCP\nTitanium diisopropoxide bis(acetylacetonate) | TiO2-np >> Li-TFSI",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_reaction_solutions_compounds_supplier",
                        "description": "The suppliers of the non-solvent chemicals.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the non-solvent chemical suppliers associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solution contains several dissolved compounds, e.g. A and B, list the associated suppliers and separate them with semicolons, as in (A; B)\n- The number and order of layers, reaction steps, and solvents must line up with the previous columns.\n- For gas phase reactions, state the suppliers for the gases or the targets/evaporation sources that are evaporated/sputtered/etc.\n- For solid state reactions, state the suppliers for the compounds in the same way.\n- For reaction steps involving only pure solvents, state the supplier as \u2018none\u2019 (as that that is entered in a separate filed)\n- For chemicals that are lab made, state that as \u201cLab made\u201d or \u201cLab made (name of lab)\u201d\n- If the supplier for a compound is unknown, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nDysole; Sigma Aldrich; Dyenamo; Sigma Aldrich\nSigma Aldrich; Fisher | Acros\nLab made (EPFL) | Sigma Aldrich >> none",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_reaction_solutions_compounds_purity",
                        "description": "The purity of the non-solvent chemicals.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the compound purities associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solution contains several dissolved compounds, i.e. A and B, list the associated purities and separate them with semicolons, as in (A; B)\n- The number and order of layers, reaction steps, and solvents must line up with the previous columns.\n- Use standard nomenclature for purities, e.g. pro analysis, puris, extra dry, etc.\n- For reaction steps involving only pure solvents, state this as \u2018none\u2019 (as that is stated in another field)\n- If the purity for a compound is not known, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nPro analysis\n99.999; Puris| Tecnical\nUnknown >> Pro analysis; Pro analysis | none",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_reaction_solutions_concentrations",
                        "description": "The concentration of the non-solvent precursor chemicals.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the concentrations associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solution contains several dissolved compounds, e.g. A and B, list the associated concentrations and separate them with semicolons, as in (A; B)\n- The order of the compounds must be the same as in the previous filed.\n- For reaction steps involving only pure solvents, state this as \u2018none\u2019\n- When concentrations are unknown, state that as \u2018nan\u2019\n- Concentrations can be stated in different units suited for different situations. Therefore, specify the unit used. When possible, use one of the preferred units\no M, mM, molal; g/ml, mg/ml, \u00b5g/ml, wt%, mol%, vol%, ppt, ppm, ppb\n- For values with uncertainties, state the best estimate, e.g write 4 wt% and not 3-5 wt%.\nExample\n4 wt%\n0.2 M; 0.15 M| 10 mg/ml\n0.3 mol% | 2 mol%; 0.2 wt% | nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_reaction_solutions_volumes",
                        "description": "The volume of the reaction solutions\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the volumes associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The volumes refer the volumes used, not the volume of the stock solutions. Thus if 0.15 ml of a solution is spin-coated, the volume is 0.15 ml\n- For reaction steps without solvents, state the volume as \u2018nan\u2019\n- When volumes are unknown, state that as \u2018nan\u2019\nExample\n0.1\n0.1 >> 0.05 | 0.05\nnan | 0.15",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_reaction_solutions_age",
                        "description": "The age of the solutions\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the age of the solutions associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- As a general guideline, the age refers to the time from the preparation of the final precursor mixture to the reaction procedure.\n- When the age of a solution is not known, state that as \u2018nan\u2019\n- For reaction steps where no solvents are involved, state this as \u2018nan\u2019\n- For solutions that is stored a long time, an order of magnitude estimate is adequate.\nExample\n2\n0.25 |1000 >> 10000\nnan | nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_reaction_solutions_temperature",
                        "description": "The temperature of the reaction solutions.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the temperatures of the solutions associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a reaction solution undergoes a temperature program, list the temperatures (e.g. start, end, and other important points) and separate them with semicolons, e.g. 25; 100\n- When the temperature of a solution is unknown, state that as \u2018nan\u2019\n- For reaction steps where no solvents are involved, state the temperature of the gas or the solid if that make sense. Otherwise state this as \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 120 and not 110-130.\n- Assume an undetermined room temperature to be 25\nExample\n25\n100; 50 | 25\nnan | 25 >> 25",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_substrate_temperature",
                        "description": "The temperature of the substrate.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the temperatures of the substrates (i.e. the last deposited layer) associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The temperature of the substrate refers to the temperature when the deposition of the layer is occurring.\n- If a substrate undergoes a temperature program before the deposition, list the temperatures (e.g. start, end, and other important points) and separate them with semicolons (e.g. 25; 100)\n- When the temperature of a substrate is not known, state that as \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 120 and not 110-130.\n- Assume that an undetermined room temperature is 25\nExample\n125; 325; 375; 450 | 25 >> 25\n100\nnan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_thermal_annealing_temperature",
                        "description": "The temperatures of the thermal annealing program associated with depositing the layers\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the annealing temperatures associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If the thermal annealing involves a temperature program with multiple temperature stages, list the temperatures (e.g. start, end, and other important points) and separate them with semicolons (e.g. 25; 100)\n- For values with uncertainties, state the best estimate, e.g. write 120 and not 110-130.\n- If no thermal annealing is occurring after the deposition of a layer, state that by stating the room temperature (assumed to 25\u00b0C if not further specified)\n- If the thermal annealing program is not known, state that by \u2018nan\u2019\nExample\n450 | 125; 325; 375; 450 >> 125; 325; 375; 450\n50 | 25\nnan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_thermal_annealing_time",
                        "description": "The time program associated to the thermal annealing program.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the annealing times associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If the thermal annealing involves a temperature program with multiple temperature stages, list the associated times at those temperatures and separate them with semicolons.\n- The annealing times must align in terms of layers\u00b8 reaction steps and annealing temperatures in the previous filed.\n- If a time is not known, state that by \u2018nan\u2019\n- If no thermal annealing is occurring after the deposition of a layer, state that by \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 20 and not 10-30.\nExample\n30 | 5; 5; 5; 30 >> 5; 5; 5; 30\n60 | 1000\nnan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_thermal_annealing_atmosphere",
                        "description": "The atmosphere during thermal annealing\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the atmospheres associated to each annealing step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- If the atmosphere is a mixture of different gases, i.e. A and B, list the gases in alphabetic order and separate them with semicolons, as in (A; B)\n- \u201cDry air\u201d represent air with low relative humidity but where the relative humidity is not known\n- \u201cAmbient\u201d represent air where the relative humidity is not known. For ambient conditions where the relative humidity is known, state this as \u201cAir\u201d\n- \u201cVacuum\u201d (of unspecified pressure) is for this purpose considered as an atmospheric gas.\n- This is often the same as the atmosphere under which the deposition is occurring, but not always.\n- This category was included after the projects initial phase wherefor the list of reported categories is\nshort. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nN2\nVacuum | N2\nAir | Ar >> Ar",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "storage_time_until_next_deposition_step",
                        "description": "The time between the HTL stack is finalised and the next layer is deposited\n- If there are uncertainties, only state the best estimate, e.g. write 35 and not 20-50.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "storage_atmosphere",
                        "description": "The atmosphere in which the sample with the finalised HTL stack is stored until the next deposition step.\nExample\nAir\nN2\nVacuum",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "storage_relative_humidity",
                        "description": "The relive humidity under which the sample with the finalised HTL stack is stored until next deposition step\n- If there are uncertainties, only state the best estimate, e.g. write 35 and not 20-50.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "surface_treatment_before_next_deposition_step",
                        "description": "Description of any type of surface treatment or other treatment the sample with the finalised ETL-stack undergoes before the next deposition step.\n- If more than one treatment, list the treatments and separate them by a double forward angel bracket (\u2018 >> \u2018)\n- If no special treatment, state that as \u2018none\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is\nshort. Thus, be prepared to expand the given list of alternatives in the data template.\nExample:\nnone\nAr plasma",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    }
                ],
                "sub_sections": []
            }
        },
        {
            "name": "perovskite",
            "sub_section": {
                "name": "Perovskite",
                "description": "This section contains information about the properties of the absorber layer. It describes the `chemical formula`, the `dimensionality`, the `bandgap`,\nor the `list of dopants and additives` that are in the perovskite layer.",
                "quantities": [
                    {
                        "name": "single_crystal",
                        "description": "TRUE if the cell is based on a perovskite single crystal",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "dimension_0D",
                        "description": "TRUE if the cell is based on a perovskite quantum dots. Perovskite nanoparticle architectures can also be counted here unless they more have the characteristics of a standard polycrystalline cell",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "dimension_2D",
                        "description": "TRUE if the cell is based on 2D perovskites, i.e. a layered perovskite with a large A-cation",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "dimension_2D3D_mixture",
                        "description": "TRUE if the cell is based on a mixture of 2D and 3D perovskites. This is sometimes referred to as reduced dimensional perovskites (but not as reduced as to be a pure 2D perovskite)",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "dimension_3D",
                        "description": "TRUE for standard three-dimensional perovskites with ABC3 structures. TRUE also for the case where the bulk of the perovskite is 3D but where there exist a thin 2D-caping layer",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "dimension_3D_with_2D_capping_layer",
                        "description": "TRUE if the bulk of the perovskite layer is 3D but there is a top layer with lower dimensionality.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "dimension_list_of_layers",
                        "description": "A list of the perovskite dimensionalities\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- In most cases, there will be only one layer\n- For a perovskite that is a mixture of a 2D and a 3D phase, mark this is as2.5\nExample\n3\n3 | 2\n0",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "composition_perovskite_ABC3_structure",
                        "description": "TRUE if the photo-absorber has a perovskite structure\n- The typical perovskite has an ABC3 structure and that is clearly a TRUE\n- This category is inclusive in the sense that also 2D perovskite analogues should be labelled as TRUE",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "composition_perovskite_inspired_structure",
                        "description": "TRUE if the photo absorber does not have a perovskite structure. In the literature we sometimes see cells based on non-perovskite photo absorbers, but which claims to be \u201cperovskite inspired\u201d regardless if the crystal structure has any resemblance to the perovskite ABC3 structure or not. This category is for enabling those cells to easily be identified and filtered.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "composition_a_ions",
                        "description": "List of the A-site ions in the perovskite structure\n- We have experimented with letting users write the perovskite structure and from that extract ions and coefficients. Due to the multitude of formatting variations, that has not worked out very well, wherefor we now define the perovskite ion by ion.\n- List all the A-site ions in alphabetic order and separate them by semicolons\n- For ions which labels are three characters or longer, enclose them in parenthesis. That improves readability and simplifies downstream data treatment.\n- In case of a layered perovskite structure, separate layers by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- Only include ions that go into the perovskite structure. Ions that only are found in secondary phases, or amorphous grain boundaries, or that disappears during synthesis, should instead be added as dopants/additives in the field dedicated to dopants and additives.\no On example is Rb in MAFAPbBrI-perovskites. As far as we know, Rb does not go into the perovskite structure, even if that was believed to be the case in the beginning, but rather form secondary phases. For MAFAPbBrI-perovskites, Rb should thus not be considered as a A-site cation, but as a dopant/additive.\nExample:\nMA\nFA; MA\nCs; FA; MA\n(5-AVA); MA\nCs; FA; MA | (PEA)",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "composition_a_ions_coefficients",
                        "description": "A list of the perovskite coefficients for the A-site ions\n- The list of coefficients must line up with the list of the A-site ions\n- If a coefficient is unknown, state that with an \u2018x\u2019\n- If there are uncertainties in the coefficient, only state the best estimate, e.g. write 0.4 and not 0.3-0.5.\n- A common notation is \u20181-x\u2019. Write that as x\n- If the coefficients are not known precisely, a good guess is worth more than to state that we have absolutely no idea.\nExamples:\n1\n0.83; 0.17\n0.05; 0.79; 0.16\n1.5; 0.5",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "composition_b_ions",
                        "description": "List of the B-site ions in the perovskite structure\n- We have experimented with letting users write the perovskite structure and from that extract ions and coefficients. Due to the multitude of formatting variations, that has not worked out very well, wherefor we now define the perovskite ion by ion.\n- List all the B-site ions in alphabetic order and separate them by semicolons\n- In case of a layered perovskite structure, separate layers by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- Only include ions that go into the perovskite structure. Ions that only are found in secondary phases, or amorphous grain boundaries, or that disappears during synthesis, should instead be added as dopants/additives in the field dedicated to dopants and additives.\nExample:\nPb\nSn\nPb; Sn\nBi\nPb | Pb",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "composition_b_ions_coefficients",
                        "description": "A list of the perovskite coefficients for the B-site ions\n- The list of coefficients must line up with the list of the B-site ions\n- If a coefficient is unknown, mark that with an \u2018x\u2019\n- If there are uncertainties in the coefficient, only state the best estimate, e.g. write 0.4 and not 0.3-0.5.\n- A common notation is \u20181-x\u2019. Write that as x\n- If the coefficients are not known precisely, a good guess is worth more than to state that we have absolutely no idea.\nExamples:\n1\n0.83; 0.17\nx; x\n0.5; 0.5 | 1",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "composition_c_ions",
                        "description": "List of the C-site ions in the perovskite structure\n- We have experimented with letting users write the perovskite structure and from that extract ions and coefficients. Due to the multitude of formatting variations, that has not worked out very well, wherefor we now define the perovskite ion by ion.\n- List all the A-site ions in alphabetic order and separate them by semicolons\n- For ions which labels are three characters or longer, enclose them in parenthesis. That improves readability and simplifies downstream data treatment.\n- In case of a layered perovskite structure, separate layers by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- Only include ions that go into the perovskite structure. Ions that only are found in secondary phases, or amorphous grain boundaries, or that disappears during synthesis, should instead be added as dopants/additives in the field dedicated to dopants and additives.\no One example is chloride in MAPbI3. As far as we know, Cl does not go into the perovskite structure even if that was believed to be the case in the beginning. For MAPbI3 Cl should thus not be considered as a C-site cation, but as a dopant/additive.\nExample:\nI\nBr; I\nBr\nBr; I| I",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "composition_c_ions_coefficients",
                        "description": "A list of the perovskite coefficients for the C-site ions\n- The list of coefficients must line up with the list of the C-site ions\n- If a coefficient is unknown, mark that with an \u2018x\u2019\n- If there are uncertainties in the coefficient, only state the best estimate, e.g. write 0.4 and not 0.3-0.5.\n- A common notation is \u20181-x\u2019. Write that as x\n- If the coefficients are not known precisely, a good guess is worth more than to state that we have absolutely no idea.\nExamples:\n3\n0.51; 2.49\n0.51; 2.49 | x",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "composition_none_stoichiometry_components_in_excess",
                        "description": "Components that are in excess in the perovskite synthesis. E.g. to form stoichiometric MAPbI3, PbI2 and MAI are mixed in the proportions 1:1. If one of them are in excess compared to the other, then that component is considered to be in excess. This information can be inferred from data entered on the concentration for all reaction solutions but this gives a convenient shorthand filtering option.\n- If more than one component is in excess, order them in alphabetic order and separate them by semicolons.\n- It there are no components that are in excess, write Stoichiometric\nExamples:\nPbI2\nMAI\nStoichiometric",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "composition_short_form",
                        "description": "nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "composition_long_form",
                        "description": "nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "composition_assumption",
                        "description": "The knowledge base from which the perovskite composition is inferred. Is the assumed perovskite composition based on the composition of the precursor solutions and the assumption that the final perovskite will have the same composition (i.e. Solution composition), or is it based on literature claims (i.e. Literature) or has it been experimentally verified with some technique, e.g. XRD, EDX, XRF, etc.?",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "composition_inorganic",
                        "description": "TRUE if the perovskite does not contain any organic ions.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "composition_leadfree",
                        "description": "TRUE if the perovskite is completely lead free.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "additives_compounds",
                        "description": "List of the dopants and additives that are in the perovskite\n- If the perovskite is layered (e.g. 3D perovskite with a 2D caping layer), separate the layers by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- If several dopants/additives, e.g. A and B, are present in one layer, list the dopants/additives in alphabetic order and separate them with semicolonsas in (A; B)\n- If no dopants/additives, state that as \u201cUndoped\u201d\n- If the doping situation is unknown, stat that as\u2018Unknown\u2019\n- Include any non-solvent that does not go into the perovskite structure. This includes compounds that are found in secondary phases, or amorphous grain boundaries, or that disappears during synthesis.\no One example is Rb in MAFAPbBrI-perovskites. As far as we know, Rb does not go into the perovskite structure, even if that was believed to be the case in the beginning, but rather form secondary phases. For MAFAPbBrI-perovskites, Rb should thus not be considered as a A-site cation, but as a dopant/additive.\no One other example is chloride in MAPbI3. As far as we know, Cl does not go into the perovskite structure even if that was believed to be the case in the beginning. For MAPbI3 Cl should thus not be considered as a C-site cation, but as a dopant/additive.\nExample\nCl\nUndoped\n5-AVAI\nSnF2\nAg; Cl; rGO\nRb",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "additives_concentrations",
                        "description": "The concentration of the dopants/additives.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- If more than one dopant/additive in the layer, e.g. A and B, separate the concentration for each dopant/additive with semicolons, as in (A; B)\n- For each dopant/additive in the layer, state the concentration.\n- The order of the dopants/additives must be the same as in the previous filed.\n- For layers with no dopants/additives, state this as \u2018none\u2019\n- When concentrations are unknown, state that as \u2018nan\u2019\n- Concentrations can be stated in different units suited for different situations. Therefore, specify the unit used.\n- The preferred way to state the concentration of a dopant/additive is to refer to the amount in the final product, i.e. the material in the layer. When possible, use on the preferred units\no wt%, mol%, vol%, ppt, ppm, ppb\n- When the concentration of the dopant/additive in the final product is unknown, but where the concentration of the dopant/additive in the solution is known, state that concentration instead. When possible, use on the preferred units\no M, mM, molal; g/ml, mg/ml, \u00b5g/ml\n- For values with uncertainties, state the best estimate, e.g write 4 wt% and not 3-5 wt%.\nExample\n4 wt%\n5 vol%; nan | 10 mg/ml\n0.3 mol% | 2 mol%; 0.2 wt% | 0.3 M",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "thickness",
                        "description": "The thickness of the perovskite layer\n- If the perovskite contains more than one layer, separate those by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- State thicknesses in nm\n- Every layer in the stack have a thickness. If it is unknown, state this as \u2018nan\u2019\n- If there are uncertainties, state the best estimate, e.g write 100 and not 90-110\n- For cells where the perovskite infiltrates a mesoporous scaffold, state the thickness as starting from the bottom of the infiltrated mesoporous layer to the top of the perovskite layer (i.e. include the thickness of the infiltrated mesoporous layer)\nExample\n200\n500 |20\n600 | nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "band_gap",
                        "description": "The band gap of the perovskite\n- If the perovskite contains more than one layer, separate the band gaps for the respective layer by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- If there are uncertainties, state the best estimate, e.g. write 1.62 and not 1.6-1.64\nExample\n1.62\n1.57 | 2.3",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "band_gap_graded",
                        "description": "TRUE if the band gap varies as a function of the vertical position in the perovskite layer.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "band_gap_estimation_basis",
                        "description": "The method by which the band gap was estimated. The band gap can be estimated from absorption data, EQE-data, UPS-data, or it can be estimated based on literature values for the recipe, or it could be inferred from the composition and what we know of similar but not identical compositions.\nExample\nAbsorption Tauc-plot\nLiterature\nComposition",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "pl_max",
                        "description": "The maximum from steady-state PL measurements\n- If more than one PL-max, separate those by a semicolon\nExample\n780\n550; 770",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "storage_time_until_next_deposition_step",
                        "description": "The time between the perovskite stack is finalised and the next layer is deposited\n- If there are uncertainties, state the best estimate, e.g. write 35 and not 20-50.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "storage_atmosphere",
                        "description": "The atmosphere in which the sample with the finalised perovskite stack is stored until the next deposition step.\nExample\nAir\nN2\nVacuum",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "storage_relative_humidity",
                        "description": "The time between the perovskite stack is finalised and the next layer is deposited\n- If there are uncertainties, state the best estimate, e.g write 35 and not 20-50.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "surface_treatment_before_next_deposition_step",
                        "description": "Description of any type of surface treatment or other treatment the sample with the finalised perovskite stack undergoes before the next deposition step.\n- If more than one treatment, list the treatments and separate them by a double forward angel bracket (\u2018 >> \u2018)\n- If no special treatment, state that as \u2018none\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is\nshort. Thus, be prepared to expand the given list of alternatives in the data template.\nExamples:\nnone\nUV\nOzone",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    }
                ],
                "sub_sections": []
            }
        },
        {
            "name": "perovskite_deposition",
            "sub_section": {
                "name": "PerovskiteDeposition",
                "description": "This section contains information about the deposition of the perovskite layer.",
                "quantities": [
                    {
                        "name": "number_of_deposition_steps",
                        "description": "The number of production steps involved in making the perovskite-stack\n- A spin coating program that are composed of several segments with different spin speed are still counted as one step (1)\n- A spin coating program involving an antisolvent step counts as a 1-step method (1).\n- Depositing PbI2 first and subsequently converting it to a perovskite count as a 2-step procedure (2)\n- Thermal annealing is considered separately. The motivation for this is that every step is considered to have its own thermal history.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "int64"
                        },
                        "shape": []
                    },
                    {
                        "name": "procedure",
                        "description": "The deposition procedures for the perovskite block.\n- The perovskite stack is considered as one block/layer when we consider the synthesis. Thus, even if the perovskite is layered, consider it as one block, i.e. no vertical bars in this field\n- When more than one reaction step, separate them by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- There should be as many reaction steps described here as indicated in the field \u201cPerovskite. Deposition. Number of deposition steps\u201d\n- Thermal annealing is generally not considered as an individual reaction step. The philosophy behind this is that every deposition step has a thermal history, which is specified in a separate filed. In exceptional cases with thermal annealing procedures clearly disconnected from other procedures, state \u2018Thermal annealing\u2019 as a separate reaction step.\n- Antisolvent treatment is considered in a separate filed. The motivation for that is that it usually is conducted simultaneously as a spin-coating procedure, and thus acts as an additional aspect of reaction step already accounted for. Exception to this is if there is an antisolvent step that is distinctly separated in time, e.g. a film with a spin-coated perovskite solution is immersed in an antisolvent. In that case, this could eb added as a dipp-coating event, while also being reported in the antisolvent field.\n- Even if the most common deposition procedures have been used for 95 % of all reported devise, do not be surprised if you do not find your deposition procedure in the list of reported deposition procedure, as the original dataset tended to use a simplified notation.\n- A few clarifications\n- Air brush spray\n- Deposition with something looking like an old perfume bottle. Classified as a solution technique.\n- Brush painting\no A precursor ink is applied with a brush\n- CBD\n- Chemical bath deposition. Refers to procedures where a film has been immersed in a solution where a reaction occurs. The typical example is when a PbI2 film is immerse in an IPA solution with MAI in which the PbI2 is converted to the perovskite.\n- Co-evaporation\n- Simultaneous evaporation from multiple sources with line of sight deposition.\n- CVD\no Chemical vapour deposition. A gas phase process where a chemical reaction is occurring in the gas phase. If a MA-containing compound is evaporated and reacted with PbI2 where another species is released to the gas phase, it is labeled as CVD. A process where MAI in gas phase react with PbI2 in gas phase is labelled as CVD. A process where MAI or MA gas is reacting with solid PbI2 is instead labelled as a gas reaction as no chemical reaction is occurring the gas phase. Note that all reactions labelled as CVD in the literature may not be CVD even if it is conducted in a CVD reactor, and should instead be labelled as a gas reaction.\n- Diffusion\no Solid state reaction where two solid components are mixed. E.g. solid MAI is bought in direct contact with solid PbI2\n- Diffusion-gas reaction\n- A special case. Where one compound, e.g. MAI is placed on top of another e.g. PbI2 where it is evaporated. It is thus a combination of a gas phase reaction and solid-solid diffusion.\n- Dipp-coating\no The thing that separates dipp-coating from CBD is the occurrence of a reaction. If you have component A in solution, dip your substrate in the solution, take it up and you have component A on your substrate, then you have done a dipp-coating. If you have substance A in solution, dip your substrate in the solution, take it up and have something else than A on your substrate, you have done a CBD (e.g. PbI2 dipped in MAI/IPA which gives MAPbI3 and not MAI on the substrate)\n- Dropcasting\no A drop is applied to a substrate where it is left to dry without any additional procedures.\n- Drop-infiltration\n- A mesoporous scaffold in which a drop of the precursor solution is infiltrated without the aid of spin-coating.\n- Doctor blading\n- There is a family of related techniques, but if it could be described as doctor blading, that is the label to use.\n- Evaporation\n- Refers to thermal evaporation with line-of-sigh deposition. i.e. PVD\n- Flash evaporation\n- Fast evaporation (in a flash) of a perovskite that sublimes on another substrate. Line of sight deposition.\n- Closed space sublimation\n- Evaporation of a well controlled amount of substance (usually in the form of a thin film) in a small container containing the final substrate.\n- Gas reaction\n- A gas phase reaction. Not a line of sight deposition. In the typical case, MAI is evaporated and the MAI gas builds up a pressure in the reaction chamber in which it reacts with a PbI2 film forming the perovskite.\n- Ion exchange\n- One perovskite is dipped into a solution (or exposed to a gas) which leads to an ion exchange, e.g. I is replaced by Br.\n- Lamination\n- A readymade film is transferred directly to the device stack. A rather broad concept. An everyday kitchen related example of lamination would eb to place a thin plastic film over a slice of pie.\n- Recrystallization\n- A perovskite that already have been formed is deformed and then recrystallised. E.g. MAPbI3 is exposed to Methylamine gas for a short while which dissolved the perovskite which then can crystallize again\n- Rinsing\n- Cleaning step with a solvent\n- Sandwiching\n- When a readymade top stack simply is placed on top of the device stack. Could be held together with clams.\n- Ultrasonic spray\n- A bit like air brush spray but with better control of droplet size. Classified as a solution technique.\nExample\nSpin-coating\nSpin-coating >> Spin-coating\nSpin-coating >> CBD\nSpin-coating >> Gas reaction\nDrop-infiltration\nCo-evaporation\nDoctor blading\nEvaporation >> Evaporation\nEvaporation >> Spin-coating\nEvaporation >> Gas reaction\nSlot-die coating\nSpray-coating",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "aggregation_state_of_reactants",
                        "description": "The physical state of the reactants\n- The three basic categories are Solid/Liquid/Gas\n- The perovskite stack is considered as one block/layer when we consider the synthesis. Thus, even if the perovskite is layered, consider it as one block, i.e. no vertical bars in this field\n- When more than one reaction step, separate the aggregation state associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- Most cases are clear cut, e.g. spin-coating involves species in solution and evaporation involves species in gas phase. For less clear-cut cases, consider where the reaction really is happening as in:\no For a spray-coating procedure, it is droplets of liquid that enters the substrate (thus a liquid phase reaction)\no For sputtering and thermal evaporation, it is species in gas phase that reaches the substrate (thus a gas phase reaction)\nExample\nLiquid\nGas >> Liquid\nLiquid >> Liquid >> Liquid",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "synthesis_atmosphere",
                        "description": "The synthesis atmosphere\n- When more than one reaction step, separate the atmospheres associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order and deposition steps must line up with the previous columns.\n- If the synthesis atmosphere is a mixture of different gases, e.g. A and B, list the gases in alphabetic order and separate them with semicolons, as in (A; B)\n- \u201cDry air\u201d represent air with low relative humidity but where the relative humidity is not known\n- \u201cAmbient\u201d represent air where the relative humidity is not known. For ambient conditions where the relative humidity is known, state this as \u201cAir\u201d\n- \u201cVacuum\u201d (of unspecified pressure) is for this purpose considered as an atmospheric gas\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nN2\nAir\nN2 >> N2\nVacuum",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "synthesis_atmosphere_pressure_total",
                        "description": "The total gas pressure during each reaction step\n- When more than one reaction step, separate the pressures associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of deposition steps must line up with the previous columns.\n- Pressures can be stated in different units suited for different situations. Therefore, specify the unit. The preferred units are:\no atm, bar, mbar, mmHg, Pa, torr, psi\n- If a pressure is not known, stat that as \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 100 pa and not 80-120 pa.\nExample\n1 atm\n0.002 torr\n1 atm >> 1 atm >> nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "synthesis_atmosphere_pressure_partial",
                        "description": "The partial pressures for the gases present during each reaction step.\n- When more than one reaction step, separate the pressures associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of deposition steps must line up with the previous columns.\n- If the synthesis atmosphere is a mixture of different gases, e.g. A and B, list the partial pressures and separate them with semicolons, as in (A; B). The list of partial pressures must line up with the gases they describe.\n- In cases where no gas mixtures are used, this field will be the same as the previous filed.\nExample\n1 atm\n0.002 torr; 0.03 torr\n0.8 atm; 0.2 atm >> 1 atm >> nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "synthesis_atmosphere_relative_humidity",
                        "description": "The relative humidity during each deposition step\n- When more than one reaction step, separate the relative humidity associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of deposition steps must line up with the previous columns\n- If the relative humidity for a step is not known, stat that as \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 35 and not 30-40.\nExample\n35\n0 >> 20\n25 >> 25 >> 0",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "solvents",
                        "description": "The solvents used in each deposition procedure for each layer in the stack\n- When more than one reaction step, separate the solvents associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solvent is a mixture of different solvents, e.g. A and B, list the solvents in alphabetic order and separate them with semicolons, as in (A; B)\n- The number and order of deposition steps must line up with the previous columns.\n- For non-liquid processes with no solvents, state the solvent as \u2018none\u2019\n- If the solvent is not known, state this as \u2018Unknown\u2019\n- Use common abbreviations when appropriate but spell it out when risk for confusion\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nDMF; DMSO\nGBL\nDMF >> IPA\nDMF >> none\nDMF; DMSO >> IPA",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "solvents_mixing_ratios",
                        "description": "The mixing ratios of the solvents used in each deposition procedure for each layer in the stack\n- When more than one reaction step, separate the solvent mixing ratios associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of deposition steps must line up with the previous columns.\n- For pure solvents, state the mixing ratio as 1\n- For non-solvent processes, state the mixing ratio as 1\n- For unknown mixing ratios, state the mixing ratio as \u2018nan\u2019\n- For solvent mixtures, i.e. A and B, state the mixing ratios by using semicolons, as in (VA; VB)\n- The preferred metrics is the volume ratios. If that is not available, mass or mol ratios can be used instead, but it the analysis the mixing ratios will be assumed to be based on volumes.\nExample\n1\n4; 1 >> 1\n1 >> 5; 2; 0.3 >> 2; 1",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "solvents_supplier",
                        "description": "The suppliers of all the solvents.\n- When more than one reaction step, separate the solvent suppliers associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solvent is a mixture of different solvents, e.g. A and B, list the associated suppliers and separate them with semicolons, as in (A; B)\n- The number and order of reaction steps and solvents must line up with the previous columns.\n- For non-liquid processes with no solvents, mark the supplier as \u2018none\u2019\n- If the supplier for a solvent is unknown, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nSigma Aldrich\nSigma Aldrich; Fisher >> Acros\nnone >> Sigma Aldrich; Sigma Aldrich >> Unknown",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "solvents_purity",
                        "description": "The purity of the solvents used.\n- When more than one reaction step, separate the solvent purities associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solvent is a mixture of different solvents, e.g. A and B, list the associated purities and separate them with semicolons, as in (A; B)\n- The number and order of layers, reaction steps, and solvents must line up with the previous columns.\n- Use standard nomenclature for purities, e.g. pro analysis, puris, extra dry, etc.\n- For non-liquid processes with no solvents, state the purity as \u2018none\u2019\n- If the purity for a solvent is not known, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nPro analysis\nPuris; Puris>> Tecnical\nnone >> Pro analysis; Pro analysis >> Unknown",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "reaction_solutions_compounds",
                        "description": "The non-solvent precursor chemicals used in each deposition procedure\n- When more than one reaction step, separate the non-solvent chemicals associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solution contains several compounds, e.g. A and B, list the associated compounds in alphabetic order and separate them with semicolons, as in (A; B)\n- Note that also dopants/additives should be included\n- When several precursor solutions are made and mixed before the reaction step, it is the properties of the final mixture used in the reaction we here describe.\n- The number and order of reaction steps must line up with the previous columns.\n- For gas phase reactions, state the reaction gases as if they were in solution.\n- For solid-state reactions, state the compounds as if they were in solution.\n- For reaction steps involving only pure solvents, state this as \u2018none\u2019\n- If the compounds for a deposition step is not known, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nCsI; FAI; MAI; PbBr2; PbI2\nPbI2 >> MAI\nPbBr2; PbI2 >> FAI; MAI >> none",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "reaction_solutions_compounds_supplier",
                        "description": "The suppliers of the non-solvent chemicals.\n- When more than one reaction step, separate the non-solvent chemical suppliers associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solution contains several dissolved compounds, e.g. A and B, list the associated suppliers and separate them with semicolons, as in (A; B)\n- The number and order of reaction steps and solvents must line up with the previous columns.\n- For gas phase reactions, state the suppliers for the gases or the targets/evaporation sources that are evaporated/sputtered/etc.\n- For solid state reactions, state the suppliers for the compounds in the same way.\n- For reaction steps involving only pure solvents, state the supplier as \u2018none\u2019 (as that that is entered in a separate filed)\n- For chemicals that are lab made, state that as \u201cLab made\u201d or \u201cLab made (name of lab)\u201d\n- If the supplier for a compound is unknown, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nDysole; Sigma Aldrich; Dyenamo; Sigma Aldrich\nSigma Aldrich; Fisher | Acros\nLab made (EPFL) | Sigma Aldrich >> none",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "reaction_solutions_compounds_purity",
                        "description": "The purity of the chemicals used.\n- When more than one reaction step, separate the compound purities associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solution contains several dissolved compounds, i.e. A and B, list the associated purities and separate them with semicolons, as in (A; B)\n- The number and order of reaction steps and solvents must line up with the previous columns.\n- Use standard nomenclature for purities, e.g. pro analysis, puris, extra dry, etc.\n- For reaction steps involving only pure solvents, state this as \u2018none\u2019 (as that is stated in another field)\n- If the purity for a compound is not known, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nPro analysis\n99.999; Puris| Tecnical\nUnknown >> Pro analysis; Pro analysis | none",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "reaction_solutions_concentrations",
                        "description": "The concentration of the non-solvent precursor chemicals.\n- When more than one reaction step, separate the concentrations associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of deposition steps and chemicals must line up with the previous columns.\n- If a solution contains several dissolved compounds, e.g. A and B, list the associated concentrations and separate them with semicolons, as in (A; B)\n- The order of the chemicals must line up to the chemicals in the previous column.\n- The order of the compounds must be the same as in the previous filed.\n- For reaction steps involving only pure solvents, state this as \u2018none\u2019\n- For gas phase reactions, state the concentration as \u2018none\u2019\n- For solid-state reactions, state the concentration as \u2018none\u2019\n- When concentrations are unknown, state that as \u2018nan\u2019\n- Concentrations can be stated in different units suited for different situations. Therefore, specify the unit used. When possible, use one of the preferred units\no M, mM, molal; g/ml, mg/ml, \u00b5g/ml, wt%, mol%, vol%, ppt, ppm, ppb\n- For values with uncertainties, state the best estimate, e.g write 4 wt% and not 3-5 wt%.\nExample\n0.063 M; 1.25 M; 1.25 M; 1.14 M; 1.14 M\n1.25 M; 1.25 M >> 1.14 M; 1.14 M; 10 mg/ml\n1 M; 1 M >> none",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "reaction_solutions_volumes",
                        "description": "The volume of the reaction solutions used. used in each deposition procedure\n- When more than one reaction step, separate the volumes associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The volumes refer the volumes used, not the volume of the stock solutions. Thus if 0.15 ml of a solution is spin-coated, the volume is 0.15 ml\n- For reaction steps without solvents, state the volume as \u2018nan\u2019\n- When volumes are unknown, state that as \u2018nan\u2019\nExample\n0.04\nnan >> 0.1\nnan >> 10",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "reaction_solutions_age",
                        "description": "The age of the solutions used in the deposition\n- When more than one reaction step, separate the age of the solutions associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- As a general guideline, the age refers to the time from the preparation of the final precursor mixture to the reaction procedure.\n- When the age of a solution is not known, state that as \u2018nan\u2019\n- For reaction steps where no solvents are involved, state this as \u2018nan\u2019\n- For solutions that is stored a long time, an order of magnitude estimate is adequate.\nExample\n0.5\nnan >> 10\n10000 >> nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "reaction_solutions_temperature",
                        "description": "The temperature of the reaction solutions.\n- If there is more than one reaction step involved, list the solution temperatures and separate the data for each step by a double forward angel bracket (\u2018 >> \u2018)\n- If a reaction solution undergoes a temperature program, list the temperatures (e.g. start, end, and other important points) and separate them with a semicolon (e.g. heated to 80\u00b0C and cooled to room temperature before used would be80; 25)\n- When the temperature of a solution is not known, state that as \u2018nan\u2019\n- For reaction steps where no solvents are involved, state the temperature of the gas or the solid if that make sense. Otherwise mark this with \u2018nan\u2019\n- Assume that an undetermined room temperature is 25\nExample\n25\nnan >> 50\n80; 25",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "substrate_temperature",
                        "description": "The temperature of the substrate on which the perovskite is deposited.\n- When more than one reaction step, separate the temperatures of the solutions associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a reaction solution undergoes a temperature program, list the temperatures (e.g. start, end, and other important points) and separate them with semicolons, e.g. 25; 100\n- When the temperature of a solution is unknown, state that as \u2018nan\u2019\n- For reaction steps where no solvents are involved, state the temperature of the gas or the solid if that make sense. Otherwise state this as \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 120 and not 110-130.\n- Assume an undetermined room temperature to be 25\nExample\n25\n70 >> 25\nnan >> 40",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "quenching_induced_crystallisation",
                        "description": "TRUE is measures were taken to discontinuously accelerate the crystallisation process without significantly changing the temperature. i.e. an antisolvent treatment or an analogue process was used.\n- The most common case is the antisolvent treatment where a volume of a solvent in which the perovskite is not soluble is poured on the substrate during spin coating.\n- The same effect can also be achieved by blowing a gas on the sample\n- If the sample quickly after spin coating is subjected to a vacuum, this also counts as quenched induced crystallisation",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "quenching_media",
                        "description": "The solvents used in the antisolvent treatment\n- If the antisolvent is a mixture of different solvents, e.g. A and B, list the solvents in alphabetic order and separate them with semicolonsas in (A; B)\n- If gas quenching was used, state the gas used\n- If the sample quickly after spin coating was subjected to a vacuum, state this as \u2018Vacuum\u2019\n- If an antisolvent was used but it is unknown which one, stat this as \u201cAntisolvent\u201d\n- If no antisolvent was used, leave this field blank\nExample\nChlorobenzene\nToluene\nDiethyl ether\nEthyl acetate\nN2\nVacuum\nAnisole",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "quenching_media_mixing_ratios",
                        "description": "The mixing ratios of the antisolvent\n- The order of the solvent must line up with the previous column\n- For solvent mixtures, i.e. A and B, state the mixing ratios by using semicolons, as in (VA; VB)\n- The preferred metrics is the volume ratios. If that is not available, mass or mol ratios can be used instead, but it the analysis the mixing ratios will be assumed to be based on volumes.\n- For pure solvents, give the mixing ratio as 1\n- For non-solvent processes, give the mixing ratio as 1\nExample\n1\n4; 1",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "quenching_media_volume",
                        "description": "The volume of the antisolvent\n- For gas and vacuum assisted quenching, stat the volume as \u2018nan\u2019\n- If the sample is dipped or soaked in the antisolvent, state the volume of the entire solution",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "quenching_media_additives_compounds",
                        "description": "List of the dopants and additives in the antisolvent\n- If several dopants/additives, e.g. A and B, are present, list the dopants/additives in alphabetic order and separate them with semicolonsas in (A; B)\n- If no dopants/additives, leave the field blank",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "quenching_media_additives_concentrations",
                        "description": "The concentration of the dopants/additives in the antisolvent\n- If more than one dopant/additive in the layer, e.g. A and B, separate the concentration for each dopant/additive with semicolons, as in (A; B)\n- For each dopant/additive, state the concentration.\n- The order of the dopants/additives must be the same as in the previous filed.\n- Concentrations can be stated in different units suited for different situations. Therefore, specify the unit used.\n- The preferred way to state the concentration of a dopant/additive is to refer to the amount in the final product, i.e. the material in the layer. When possible, use on the preferred units\no wt%, mol%, vol%, ppt, ppm, ppb\n- When the concentration of the dopant/additive in the final product is unknown, but where the concentration of the dopant/additive in the solution is known, state that concentration instead. When possible, use on the preferred units\no M, mM, molal; g/ml, mg/ml, \u00b5g/ml\n- For values with uncertainties, state the best estimate, e.g write 4 wt% and not 3-5 wt%.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "thermal_annealing_temperature",
                        "description": "The temperatures of the thermal annealing program associated with each deposition step\n- When more than one reaction step, separate the annealing temperatures associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If the thermal annealing involves a temperature program with multiple temperature stages, list the temperatures (e.g. start, end, and other important points) and separate them with semicolons (e.g. 25; 100)\n- For values with uncertainties, state the best estimate, e.g. write 120 and not 110-130.\n- If no thermal annealing is occurring after the deposition of a layer, state that by stating the room temperature (assumed to 25\u00b0C if not further specified)\n- If the thermal annealing program is not known, state that by \u2018nan\u2019\nExample\n100\n70; 100 >> 100\n25 >> 90; 150",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "thermal_annealing_time",
                        "description": "The time program associated to the thermal annealing.\n- When more than one reaction step, separate the annealing times associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If the thermal annealing involves a temperature program with multiple temperature stages, list the associated times at those temperatures and separate them with semicolons.\n- The annealing times must align in terms of layers\u00b8 reaction steps and annealing temperatures in the previous filed.\n- If a time is not known, state that by \u2018nan\u2019\n- If no thermal annealing is occurring after the deposition of a layer, state that by \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 20 and not 10-30.\nExample\n60\n5; 30 >> 60\n0 >> 5; 5",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "thermal_annealing_atmosphere",
                        "description": "The atmosphere in which the thermal annealing is conducted.\n- When more than one reaction step, separate the atmospheres associated to each annealing step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of deposition steps must line up with the previous columns.\n- If the atmosphere is a mixture of different gases, i.e. A and B, list the gases in alphabetic order and separate them with semicolons, as in (A; B)\n- \u201cDry air\u201d represent air with low relative humidity but where the relative humidity is not known\n- \u201cAmbient\u201d represent air where the relative humidity is not known. For ambient conditions where the relative humidity is known, state this as \u201cAir\u201d\n- \u201cVacuum\u201d (of unspecified pressure) is for this purpose considered as an atmospheric gas.\n- This is often the same as the atmosphere under which the deposition is occurring, but not always.\n- This category was included after the projects initial phase wherefor the list of reported categories is\nshort. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nN2\nAir >> N2\nAr",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "thermal_annealing_relative_humidity",
                        "description": "The relative humidity during the thermal annealing\n- If there is more than one annealing step involved, list the associate relative humidity in the surrounding atmosphere and separate them by a double forward angel bracket (\u2018 >> \u2018)\n- The number and order of annealing steps must line up with the previous column\n- If there are uncertainties, only state the best estimate, e.g. write 35 and not 20-50.\n- If a humidity is not known, stat that as \u2018nan\u2019\nExample\n0\n35 >> 0\nnan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "thermal_annealing_pressure",
                        "description": "The atmospheric pressure during the thermal annealing\n- If there is more than one annealing step involved, list the associate atmospheric pressures and separate them by a double forward angel bracket (\u2018 >> \u2018)\n- The number and order of annealing steps must line up with the previous column\n- Pressures can be stated in different units suited for different situations. Therefore, specify the unit. The preferred units are:\no atm, bar, mbar, mmHg, Pa, torr, psi\n- If a pressure is not known, stat that as \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 100 pa and not 80-120 pa.\nExample\n1 atm\n1 atm >> 0.002 torr\n1 atm >> 1 atm >> nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "solvent_annealing",
                        "description": "TRUE if there has been a separate solvent annealing step, i.e. a step where the perovskite has been annealing in an atmosphere with a significant amount of solvents. This step should also be included deposition procedure sequence but is also stated separately here to simplify downstream filtering.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "solvent_annealing_timing",
                        "description": "The timing of the solvent annealing with respect to the thermal annealing step under which the perovskite is formed. There are three options.\n- The solvent annealing is conducted before the perovskite is formed.\n- The solvent annealing is conducted under the same annealing step in which the perovskite is formed\n- The solvent annealing is conducted after the perovskite has formed.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "solvent_annealing_solvent_atmosphere",
                        "description": "The solvents used in the solvent annealing step\n- If the solvent atmosphere is a mixture of different solvents and gases, e.g. A and B, list them in alphabetic order and separate them with semicolonsas in (A; B)\nExample\nDMSO\nDMF\nDMF; DMSO",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "solvent_annealing_time",
                        "description": "The extend of the solvent annealing step in minutes\n- If the time is not known, state that by \u2018nan\u2019\n- If the solvent annealing involves a temperature program with multiple temperature stages, list the associated times at each temperature and separate them with a semicolon (e.g. 5; 10)",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "solvent_annealing_temperature",
                        "description": "The temperature during the solvent annealing step\n- The temperature refers to the temperature of the sample\n- If the solvent annealing involves a temperature program with multiple temperature stages, list the associated temperatures and separate them with a semicolon (e.g. 5; 10) and make sure they align with the times in the previous field.\n- If the temperature is not known, state that by \u2018nan\u2019",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "after_treatment_of_formed_perovskite",
                        "description": "Any after treatment of the formed perovskite. Most possible reaction steps should have been entered before this point. This is an extra category for procedures that just does not fit into any of the other categories.\nExamples:\nHot isostatic pressing\nMagnetic field\nUV radiation",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "after_treatment_of_formed_perovskite_met",
                        "description": "Connected to the previous field (After treatment of formed perovskite). The label describing the method should be in the previous filed, and the associated metrics in this one. For exampleThe sample is intense gamma radiation at a flux of X under 45 minutes. The \u201cgamma radiation\u201d is the label, and the time and the flux is the metrics. Give the units when you state the metrics\nExamples:\n40kHz; 5W; 4 min\n45 deg. C\n30 min\n50 W/cm2; 2.38 s",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    }
                ],
                "sub_sections": []
            }
        },
        {
            "name": "htl",
            "sub_section": {
                "name": "HTL",
                "description": "A section to describe information related to the Hole Transport Layer (**HTL**).",
                "quantities": [
                    {
                        "name": "stack_sequence",
                        "description": "The stack sequence describing the hole transport layer. Use the following formatting guidelines\n- With the HTL, we refer to any layer between the substrate and the perovskite in a pin-device, and any layer between the perovskite and the back contact in a nip-device.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- If two materials, e.g. A and B, are mixed in one layer, list the materials in alphabetic order and separate them with semicolons, as in (A; B)\n- If no hole transport layer, state that as \u2018non\u2019\n- Use common abbreviations when appropriate but spell it out if risk for confusion.\n- If a material is doped, or have an additive, state the pure material here and specify the doping in the columns specifically targeting the doping of those layers.\n- There is no sharp well-defined boundary between when a material is best considered as doped or as a mixture of two materials. When in doubt if your material is best described as doped or as a mixture, use the notation that best capture the metaphysical essence of the situation.\n- There are a lot of stack sequences described in the literature. Try to find your one in the list. If it is not there (i.e. you may have done something new) define a new stack sequence according to the instructions.\nExample:\nSpiro-MeOTAD\nPEDOT:PSS\nnone\nNiO-c\nPTAA",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "thickness_list",
                        "description": "A list of thicknesses of the individual layers in the stack.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- The layers must line up with the previous filed.\n- State thicknesses in nm\n- Every layer in the stack have a thickness. If it is unknown, state this as \u2018nan\u2019\n- If there are uncertainties, state the best estimate, e.g write 100 and not 90-110\nExample\n200\nnan |250\n100 | 5 | 8",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "additives_compounds",
                        "description": "List of the dopants and additives that are in each layer of the HTL-stack\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- The layers must line up with the previous fields.\n- If several dopants/additives, e.g. A and B, are present in one layer, list the dopants/additives in alphabetic order and separate them with semicolons, as in (A; B)\n- If no dopants/additives, state that as \u201cUndoped\u201d\n- If the doping situation is unknown, stat that as\u2018Unknown\u2019\nExample\nLi-TFSI; TBP\nFK209; Li-TFSI; TBP\nF4-TCNQ\nUndoped\nCu | Ag; Cu",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "additives_concentrations",
                        "description": "The concentration of the dopants/additives.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- If more than one dopant/additive in the layer, e.g. A and B, separate the concentration for each dopant/additive with semicolons, as in (A; B)\n- For each dopant/additive in the layer, state the concentration.\n- The order of the dopants/additives must be the same as in the previous filed.\n- For layers with no dopants/additives, state this as \u2018none\u2019\n- When concentrations are unknown, state that as \u2018nan\u2019\n- Concentrations can be stated in different units suited for different situations. Therefore, specify the unit used.\n- The preferred way to state the concentration of a dopant/additive is to refer to the amount in the final product, i.e. the material in the layer. When possible, use on the preferred units\no wt%, mol%, vol%, ppt, ppm, ppb\n- When the concentration of the dopant/additive in the final product is unknown, but where the concentration of the dopant/additive in the solution is known, state that concentration instead. When possible, use on the preferred units\no M, mM, molal; g/ml, mg/ml, \u00b5g/ml\n- For values with uncertainties, state the best estimate, e.g write 4 wt% and not 3-5 wt%.\nExample\n4 wt%\n5 vol%; nan | 10 mg/ml\n0.3 mol% | 2 mol%; 0.2 wt% | 0.3 M",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_procedure",
                        "description": "The deposition procedures for the HTL-stack.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate them by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- Thermal annealing is generally not considered as an individual reaction step. The philosophy behind this is that every deposition step has a thermal history, which is specified in a separate filed. In exceptional cases with thermal annealing procedures clearly disconnected from other procedures, state \u2018Thermal annealing\u2019 as a separate reaction step.\n- Please read the instructions under \u201cPerovskite. Deposition. Procedure\u201d for descriptions and distinctions between common deposition procedures and how they should be labelled for consistency in the database.\nExample\nSpin-coating\nSpin-coating | Spin-coating\nEvaporation\nSpray-pyrolys",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_aggregation_state_of_reactants",
                        "description": "The physical state of the reactants.\n- The three basic categories are Solid/Liquid/Gas\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the aggregation state associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- Most cases are clear cut, e.g. spin-coating involves species in solution and evaporation involves species in gas phase. For less clear-cut cases, consider where the reaction really is happening as in:\no For a spray-coating procedure, it is droplets of liquid that enters the substrate (thus a liquid phase reaction)\no For sputtering and thermal evaporation, it is species in gas phase that reaches the substrate (thus a gas phase reaction)\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nLiquid\nGas | Liquid\nLiquid | Liquid >> Liquid",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_synthesis_atmosphere",
                        "description": "The synthesis atmosphere.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the atmospheres associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- If the synthesis atmosphere is a mixture of different gases, e.g. A and B, list the gases in alphabetic order and separate them with semicolons, as in (A; B)\n- \u201cDry air\u201d represent air with low relative humidity but where the relative humidity is not known\n- \u201cAmbient\u201d represent air where the relative humidity is not known. For ambient conditions where the relative humidity is known, state this as \u201cAir\u201d\n- \u201cVacuum\u201d (of unspecified pressure) is for this purpose considered as an atmospheric gas\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nN2\nVacuum | N2\nAir | Ar; H2O >> Ar",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_synthesis_atmosphere_pressure_total",
                        "description": "The total gas pressure during each reaction step\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the pressures associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- Pressures can be stated in different units suited for different situations. Therefore, specify the unit. The preferred units are:\no atm, bar, mbar, mmHg, Pa, torr, psi\n- If a pressure is not known, stat that as \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 100 pa and not 80-120 pa.\nExample\n1 atm\n0.002 torr | 10000 Pa\nnan >> 1 atm | 1 atm",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_synthesis_atmosphere_pressure_partial",
                        "description": "The partial pressures for the gases present during each reaction step.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the pressures associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- If the synthesis atmosphere is a mixture of different gases, e.g. A and B, list the partial pressures and separate them with semicolons, as in (A; B). The list of partial pressures must line up with the gases they describe.\n- In cases where no gas mixtures are used, this field will be the same as the previous filed.\nExample\n1 atm\n0.002 torr | 10000 Pa\nnan >> 0.99 atm; 0.01 atm | 1 atm",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_synthesis_atmosphere_relative_humidity",
                        "description": "The relative humidity during each deposition step\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the relative humidity associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns\n- If the relative humidity for a step is not known, stat that as \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 35 and not 30-40.\nExample\n35\n0 | 20\nnan >> 25 | 0",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_solvents",
                        "description": "The solvents used in each deposition procedure for each layer in the stack\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the solvents associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solvent is a mixture of different solvents, e.g. A and B, list the solvents in alphabetic order and separate them with semicolons, as in (A; B)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- For non-liquid processes with no solvents, state the solvent as \u2018none\u2019\n- If the solvent is not known, state this as \u2018Unknown\u2019\n- Use common abbreviations when appropriate but spell it out when risk for confusion\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nChlorobenzene\nAcetonitile; Ethanol | Chlorobenzene\nnone >> Ethanol; Methanol; H2O | DMF; DMSO",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_solvents_mixing_ratios",
                        "description": "The mixing ratios for mixed solvents\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the solvent mixing ratios associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- For pure solvents, state the mixing ratio as 1\n- For non-solvent processes, state the mixing ratio as 1\n- For unknown mixing ratios, state the mixing ratio as \u2018nan\u2019\n- For solvent mixtures, i.e. A and B, state the mixing ratios by using semicolons, as in (VA; VB)\n- The preferred metrics is the volume ratios. If that is not available, mass or mol ratios can be used instead, but it the analysis the mixing ratios will be assumed to be based on volumes.\nExample\n1\n4; 1 | 1\n1 >> 5; 2; 0.3 | 2; 1",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_solvents_supplier",
                        "description": "The suppliers of all the solvents.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the solvent suppliers associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solvent is a mixture of different solvents, e.g. A and B, list the associated suppliers and separate them with semicolons, as in (A; B)\n- The number and order of layers, reaction steps, and solvents must line up with the previous columns.\n- For non-liquid processes with no solvents, mark the supplier as \u2018none\u2019\n- If the supplier for a solvent is unknown, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nSigma Aldrich\nSigma Aldrich; Fisher | Acros\nnone >> Sigma Aldrich; Sigma Aldrich | Unknown",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_solvents_purity",
                        "description": "The purity of the solvents used.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the solvent purities associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solvent is a mixture of different solvents, e.g. A and B, list the associated purities and separate them with semicolons, as in (A; B)\n- The number and order of layers, reaction steps, and solvents must line up with the previous columns.\n- Use standard nomenclature for purities, e.g. pro analysis, puris, extra dry, etc.\n- For non-liquid processes with no solvents, state the purity as \u2018none\u2019\n- If the purity for a solvent is not known, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nPro analysis\nPuris; Puris| Tecnical\nnone >> Pro analysis; Pro analysis | Unknown",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_reaction_solutions_compounds",
                        "description": "The non-solvent precursor chemicals used in each reaction step\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the non-solvent chemicals associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solution contains several compounds, e.g. A and B, list the associated compounds in alphabetic order and separate them with semicolons, as in (A; B)\n- Note that also dopants/additives should be included\n- When several precursor solutions are made and mixed before the reaction step, it is the properties of the final mixture used in the reaction we here describe.\n- The number and order of layers and reaction steps must line up with the previous columns.\n- For gas phase reactions, state the reaction gases as if they were in solution.\n- For solid-state reactions, state the compounds as if they were in solution.\n- For reaction steps involving only pure solvents, state this as \u2018none\u2019\n- If the compounds for a deposition step is not known, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nFK209; Li-TFSI; Spiro-MeOTAD; TBP\nNiO-np\nPTAA | CuSCN",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_reaction_solutions_compounds_supplier",
                        "description": "The suppliers of the non-solvent chemicals.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the non-solvent chemical suppliers associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solution contains several dissolved compounds, e.g. A and B, list the associated suppliers and separate them with semicolons, as in (A; B)\n- The number and order of layers, reaction steps, and solvents must line up with the previous columns.\n- For gas phase reactions, state the suppliers for the gases or the targets/evaporation sources that are evaporated/sputtered/etc.\n- For solid state reactions, state the suppliers for the compounds in the same way.\n- For reaction steps involving only pure solvents, state the supplier as \u2018none\u2019 (as that that is entered in a separate filed)\n- For chemicals that are lab made, state that as \u201cLab made\u201d or \u201cLab made (name of lab)\u201d\n- If the supplier for a compound is unknown, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nDysole; Sigma Aldrich; Dyenamo; Sigma Aldrich\nSigma Aldrich; Fisher | Acros\nLab made (EPFL) | Sigma Aldrich >> none",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_reaction_solutions_compounds_purity",
                        "description": "The purity of the non-solvent chemicals.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the compound purities associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solution contains several dissolved compounds, i.e. A and B, list the associated purities and separate them with semicolons, as in (A; B)\n- The number and order of layers, reaction steps, and solvents must line up with the previous columns.\n- Use standard nomenclature for purities, e.g. pro analysis, puris, extra dry, etc.\n- For reaction steps involving only pure solvents, state this as \u2018none\u2019 (as that is stated in another field)\n- If the purity for a compound is not known, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nPro analysis\n99.999; Puris| Tecnical\nUnknown >> Pro analysis; Pro analysis | none",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_reaction_solutions_concentrations",
                        "description": "The concentration of the non-solvent precursor chemicals.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the concentrations associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solution contains several dissolved compounds, e.g. A and B, list the associated concentrations and separate them with semicolons, as in (A; B)\n- The order of the compounds must be the same as in the previous filed.\n- For reaction steps involving only pure solvents, state this as \u2018none\u2019\n- When concentrations are unknown, state that as \u2018nan\u2019\n- Concentrations can be stated in different units suited for different situations. Therefore, specify the unit used. When possible, use one of the preferred units\no M, mM, molal; g/ml, mg/ml, \u00b5g/ml, wt%, mol%, vol%, ppt, ppm, ppb\n- For values with uncertainties, state the best estimate, e.g write 4 wt% and not 3-5 wt%.\nExample\n4 wt%\n0.2 M; 0.15 M| 10 mg/ml\n0.3 mol% | 2 mol%; 0.2 wt% | nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_reaction_solutions_volumes",
                        "description": "The volume of the reaction solutions\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the volumes associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The volumes refer the volumes used, not the volume of the stock solutions. Thus if 0.15 ml of a solution is spin-coated, the volume is 0.15 ml\n- For reaction steps without solvents, state the volume as \u2018nan\u2019\n- When volumes are unknown, state that as \u2018nan\u2019\nExample\n0.1\n0.1 >> 0.05 | 0.05\nnan | 0.15",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_reaction_solutions_age",
                        "description": "The age of the solutions\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the age of the solutions associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- As a general guideline, the age refers to the time from the preparation of the final precursor mixture to the reaction procedure.\n- When the age of a solution is not known, state that as \u2018nan\u2019\n- For reaction steps where no solvents are involved, state this as \u2018nan\u2019\n- For solutions that is stored a long time, an order of magnitude estimate is adequate.\nExample\n2\n0.25 |1000 >> 10000\nnan | nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_reaction_solutions_temperature",
                        "description": "The temperature of the reaction solutions.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the temperatures of the solutions associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a reaction solution undergoes a temperature program, list the temperatures (e.g. start, end, and other important points) and separate them with semicolons, e.g. 25; 100\n- When the temperature of a solution is unknown, state that as \u2018nan\u2019\n- For reaction steps where no solvents are involved, state the temperature of the gas or the solid if that make sense. Otherwise state this as \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 120 and not 110-130.\n- Assume an undetermined room temperature to be 25\nExample\n25\n100; 50 | 25\nnan | 25 >> 25",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_substrate_temperature",
                        "description": "The temperature of the substrate.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the temperatures of the substrates (i.e. the last deposited layer) associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The temperature of the substrate refers to the temperature when the deposition of the layer is occurring.\n- If a substrate undergoes a temperature program before the deposition, list the temperatures (e.g. start, end, and other important points) and separate them with semicolons (e.g. 25; 100)\n- When the temperature of a substrate is not known, state that as \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 120 and not 110-130.\n- Assume that an undetermined room temperature is 25\nExample\n25\nnan\n125; 325; 375; 450 | 25 >> 25",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_thermal_annealing_temperature",
                        "description": "The temperatures of the thermal annealing program associated with depositing the layers\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the annealing temperatures associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If the thermal annealing involves a temperature program with multiple temperature stages, list the temperatures (e.g. start, end, and other important points) and separate them with semicolons (e.g. 25; 100)\n- For values with uncertainties, state the best estimate, e.g. write 120 and not 110-130.\n- If no thermal annealing is occurring after the deposition of a layer, state that by stating the room temperature (assumed to 25\u00b0C if not further specified)\n- If the thermal annealing program is not known, state that by \u2018nan\u2019\nExample\n25\n50 | nan\n450 | 125; 325; 375; 450 >> 125; 325; 375; 450",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_thermal_annealing_time",
                        "description": "The time program associated to the thermal annealing program.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the annealing times associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If the thermal annealing involves a temperature program with multiple temperature stages, list the associated times at those temperatures and separate them with semicolons.\n- The annealing times must align in terms of layers\u00b8 reaction steps and annealing temperatures in the previous filed.\n- If a time is not known, state that by \u2018nan\u2019\n- If no thermal annealing is occurring after the deposition of a layer, state that by \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 20 and not 10-30.\nExample\nnan\n60 | 1000\n30 | 5; 5; 5; 30 >> 5; 5; 5; 30",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_thermal_annealing_atmosphere",
                        "description": "The atmosphere during thermal annealing\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the atmospheres associated to each annealing step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- If the atmosphere is a mixture of different gases, i.e. A and B, list the gases in alphabetic order and separate them with semicolons, as in (A; B)\n- \u201cDry air\u201d represent air with low relative humidity but where the relative humidity is not known\n- \u201cAmbient\u201d represent air where the relative humidity is not known. For ambient conditions where the relative humidity is known, state this as \u201cAir\u201d\n- \u201cVacuum\u201d (of unspecified pressure) is for this purpose considered as an atmospheric gas.\n- This is often the same as the atmosphere under which the deposition is occurring, but not always.\n- This category was included after the projects initial phase wherefor the list of reported categories is\nshort. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nN2\nVacuum | N2\nAir | Ar >> Ar",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "storage_time_until_next_deposition_step",
                        "description": "The time between the HTL stack is finalised and the next layer is deposited\n- If there are uncertainties, only state the best estimate, e.g. write 35 and not 20-50.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "storage_atmosphere",
                        "description": "The atmosphere in which the sample with the finalised HTL stack is stored until the next deposition step.\nExample\nAir\nN2\nVacuum",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "storage_relative_humidity",
                        "description": "The relive humidity under which the sample with the finalised HTL stack is stored until next deposition step\n- If there are uncertainties, only state the best estimate, e.g write 35 and not 20-50.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "surface_treatment_before_next_deposition_step",
                        "description": "Description of any type of surface treatment or other treatment the sample with the finalised HTL stack undergoes before the next deposition step.\n- If more than one treatment, list the treatments and separate them by a double forward angel bracket (\u2018 >> \u2018)\n- If no special treatment, state that as \u2018none\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is\nshort. Thus, be prepared to expand the given list of alternatives in the data template.\nExample:\nnone\nAr plasma\nUV-ozone",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    }
                ],
                "sub_sections": []
            }
        },
        {
            "name": "backcontact",
            "sub_section": {
                "name": "Backcontact",
                "description": "A section to describe information related to the back contact of the solar cell.",
                "quantities": [
                    {
                        "name": "stack_sequence",
                        "description": "The stack sequence describing the back contact.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- If two materials, e.g. A and B, are mixed in one layer, list the materials in alphabetic order and separate them with semicolons, as in (A; B)\n- If no back contact, state that as \u2018non\u2019\n- Use common abbreviations when appropriate but spell it out if risk for confusion.\n- If a material is doped, or have an additive, state the pure material here and specify the doping in the columns specifically targeting the doping of those layers.\n- There is no sharp well-defined boundary between when a material is best considered as doped or as a mixture of two materials. When in doubt if your material is best described as doped or as a mixture, use the notation that best capture the metaphysical essence of the situation.\n- There are a lot of stack sequences described in the literature. Try to find your one in the list. If it is not there (i.e. you may have done something new) define a new stack sequence according to the instructions.\nExample:\nAu\nAg\nAl\nCarbon\nMoO3 | Ag",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "thickness_list",
                        "description": "A list of thicknesses of the individual layers in the stack.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- The layers must line up with the previous filed.\n- State thicknesses in nm\n- Every layer in the stack have a thickness. If it is unknown, state this as \u2018nan\u2019\n- If there are uncertainties, state the best estimate, e.g write 100 and not 90-110\nExample\n100\n10 | 80\nnan | 100",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "additives_compounds",
                        "description": "List of the dopants and additives that are in each layer of the HTL-stack\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- The layers must line up with the previous fields.\n- If several dopants/additives, e.g. A and B, are present in one layer, list the dopants/additives in alphabetic order and separate them with semicolons, as in (A; B)\n- If no dopants/additives, state that as \u201cUndoped\u201d\n- If the doping situation is unknown, stat that as\u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is\nshort. Thus, be prepared to expand the given list of alternatives in the data template, even if to most common back contacts is undoped metals\nExample\nCuS\nB; P\nAu-np | Undoped",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "additives_concentrations",
                        "description": "The concentration of the dopants/additives.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- If more than one dopant/additive in the layer, e.g. A and B, separate the concentration for each dopant/additive with semicolons, as in (A; B)\n- For each dopant/additive in the layer, state the concentration.\n- The order of the dopants/additives must be the same as in the previous filed.\n- For layers with no dopants/additives, state this as \u2018none\u2019\n- When concentrations are unknown, state that as \u2018nan\u2019\n- Concentrations can be stated in different units suited for different situations. Therefore, specify the unit used.\n- The preferred way to state the concentration of a dopant/additive is to refer to the amount in the final product, i.e. the material in the layer. When possible, use on the preferred units\no wt%, mol%, vol%, ppt, ppm, ppb\n- When the concentration of the dopant/additive in the final product is unknown, but where the concentration of the dopant/additive in the solution is known, state that concentration instead. When possible, use on the preferred units\no M, mM, molal; g/ml, mg/ml, \u00b5g/ml\n- For values with uncertainties, state the best estimate, e.g write 4 wt% and not 3-5 wt%.\nExample\n4 wt%\n5 vol%; nan | 10 mg/ml\n0.3 mol% | 2 mol%; 0.2 wt% | 0.3 M",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_procedure",
                        "description": "The deposition procedures for the HTL-stack.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate them by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- Thermal annealing is generally not considered as an individual reaction step. The philosophy behind this is that every deposition step has a thermal history, which is specified in a separate filed. In exceptional cases with thermal annealing procedures clearly disconnected from other procedures, state \u2018Thermal annealing\u2019 as a separate reaction step.\n- Please read the instructions under \u201cPerovskite. Deposition. Procedure\u201d for descriptions and distinctions between common deposition procedures and how they should be labelled for consistency in the database.\n- A few additional clarifications:\n- Lamination\no A readymade film is transferred directly to the device stack. A rather broad concept. An everyday kitchen related example of lamination would eb to place a thin plastic film over a slice of pie.\n- Sandwiching\no When a readymade top stack simply is placed on top of the device stack. Could be held together with clams. The typical example is a when a \u201cCarbon | FTO | SLG\u201d is placed on top of the device stack. Standard procedure in the DSSC filed.\nExample\nEvaporation\nEvaporation | Evaporation\nDoctor blading\nScreen printing\nSputtering\nLamination\nE-beam evaporation\nSandwiching",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_aggregation_state_of_reactants",
                        "description": "The physical state of the reactants.\n- The three basic categories are Solid/Liquid/Gas\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the aggregation state associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- Most cases are clear cut, e.g. spin-coating involves species in solution and evaporation involves species in gas phase. For less clear-cut cases, consider where the reaction really is happening as in:\no For a spray-coating procedure, it is droplets of liquid that enters the substrate (thus a liquid phase reaction)\no For sputtering and thermal evaporation, it is species in gas phase that reaches the substrate (thus a gas phase reaction)\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nLiquid\nGas | Liquid\nLiquid | Liquid >> Liquid",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_synthesis_atmosphere",
                        "description": "The synthesis atmosphere.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the atmospheres associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- If the synthesis atmosphere is a mixture of different gases, e.g. A and B, list the gases in alphabetic order and separate them with semicolons, as in (A; B)\n- \u201cDry air\u201d represent air with low relative humidity but where the relative humidity is not known\n- \u201cAmbient\u201d represent air where the relative humidity is not known. For ambient conditions where the relative humidity is known, state this as \u201cAir\u201d\n- \u201cVacuum\u201d (of unspecified pressure) is for this purpose considered as an atmospheric gas\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nVacuum\nVacuum | N2\nAir | Ar; H2O >> Ar",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_synthesis_atmosphere_pressure_total",
                        "description": "The total gas pressure during each reaction step\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the pressures associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- Pressures can be stated in different units suited for different situations. Therefore, specify the unit. The preferred units are:\no atm, bar, mbar, mmHg, Pa, torr, psi\n- If a pressure is not known, stat that as \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 100 pa and not 80-120 pa.\nExample\n1 atm\n0.002 torr | 10000 Pa\nnan >> 1 atm | 1 atm",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_synthesis_atmosphere_pressure_partial",
                        "description": "The partial pressures for the gases present during each reaction step.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the pressures associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- If the synthesis atmosphere is a mixture of different gases, e.g. A and B, list the partial pressures and separate them with semicolons, as in (A; B). The list of partial pressures must line up with the gases they describe.\n- In cases where no gas mixtures are used, this field will be the same as the previous filed.\nExample\n1 atm\n0.002 torr | 10000 Pa\nnan >> 0.99 atm; 0.01 atm | 1 atm",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_synthesis_atmosphere_relative_humidity",
                        "description": "The relative humidity during each deposition step\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the relative humidity associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns\n- If the relative humidity for a step is not known, stat that as \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 35 and not 30-40.\nExample\n35\n0 | 20\nnan >> 25 | 0",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_solvents",
                        "description": "The solvents used in each deposition procedure for each layer in the stack\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the solvents associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solvent is a mixture of different solvents, e.g. A and B, list the solvents in alphabetic order and separate them with semicolons, as in (A; B)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- For non-liquid processes with no solvents, state the solvent as \u2018none\u2019\n- If the solvent is not known, state this as \u2018Unknown\u2019\n- Use common abbreviations when appropriate but spell it out when risk for confusion\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nnone\nAcetonitile; Ethanol | Chlorobenzene\nnone >> Ethanol; Methanol; H2O | DMF; DMSO",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_solvents_mixing_ratios",
                        "description": "The mixing ratios for mixed solvents\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the solvent mixing ratios associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- For pure solvents, state the mixing ratio as 1\n- For non-solvent processes, state the mixing ratio as 1\n- For unknown mixing ratios, state the mixing ratio as \u2018nan\u2019\n- For solvent mixtures, i.e. A and B, state the mixing ratios by using semicolons, as in (VA; VB)\n- The preferred metrics is the volume ratios. If that is not available, mass or mol ratios can be used instead, but it the analysis the mixing ratios will be assumed to be based on volumes.\nExample\n1\n4; 1 | 1\n1 >> 5; 2; 0.3 | 2; 1",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_solvents_supplier",
                        "description": "The suppliers of all the solvents.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the solvent suppliers associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solvent is a mixture of different solvents, e.g. A and B, list the associated suppliers and separate them with semicolons, as in (A; B)\n- The number and order of layers, reaction steps, and solvents must line up with the previous columns.\n- For non-liquid processes with no solvents, mark the supplier as \u2018none\u2019\n- If the supplier for a solvent is unknown, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nSigma Aldrich\nSigma Aldrich; Fisher | Acros\nnone >> Sigma Aldrich; Sigma Aldrich | Unknown",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_solvents_purity",
                        "description": "The purity of the solvents used.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the solvent purities associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solvent is a mixture of different solvents, e.g. A and B, list the associated purities and separate them with semicolons, as in (A; B)\n- The number and order of layers, reaction steps, and solvents must line up with the previous columns.\n- Use standard nomenclature for purities, e.g. pro analysis, puris, extra dry, etc.\n- For non-liquid processes with no solvents, state the purity as \u2018none\u2019\n- If the purity for a solvent is not known, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nPro analysis\nPuris; Puris| Tecnical\nnone >> Pro analysis; Pro analysis | Unknown",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_reaction_solutions_compounds",
                        "description": "The non-solvent precursor chemicals used in each reaction step\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the non-solvent chemicals associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solution contains several compounds, e.g. A and B, list the associated compounds in alphabetic order and separate them with semicolons, as in (A; B)\n- Note that also dopants/additives should be included\n- When several precursor solutions are made and mixed before the reaction step, it is the properties of the final mixture used in the reaction we here describe.\n- The number and order of layers and reaction steps must line up with the previous columns.\n- For gas phase reactions, state the reaction gases as if they were in solution.\n- For solid-state reactions, state the compounds as if they were in solution.\n- For reaction steps involving only pure solvents, state this as \u2018none\u2019\n- If the compounds for a deposition step is not known, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nAu\nCuI\nAg",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_reaction_solutions_compounds_supplier",
                        "description": "The suppliers of the non-solvent chemicals.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the non-solvent chemical suppliers associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solution contains several dissolved compounds, e.g. A and B, list the associated suppliers and separate them with semicolons, as in (A; B)\n- The number and order of layers, reaction steps, and solvents must line up with the previous columns.\n- For gas phase reactions, state the suppliers for the gases or the targets/evaporation sources that are evaporated/sputtered/etc.\n- For solid state reactions, state the suppliers for the compounds in the same way.\n- For reaction steps involving only pure solvents, state the supplier as \u2018none\u2019 (as that that is entered in a separate filed)\n- For chemicals that are lab made, state that as \u201cLab made\u201d or \u201cLab made (name of lab)\u201d\n- If the supplier for a compound is unknown, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nDysole; Sigma Aldrich; Dyenamo; Sigma Aldrich\nSigma Aldrich; Fisher | Acros\nLab made (EPFL) | Sigma Aldrich >> none",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_reaction_solutions_compounds_purity",
                        "description": "The purity of the non-solvent chemicals.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the compound purities associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solution contains several dissolved compounds, i.e. A and B, list the associated purities and separate them with semicolons, as in (A; B)\n- The number and order of layers, reaction steps, and solvents must line up with the previous columns.\n- Use standard nomenclature for purities, e.g. pro analysis, puris, extra dry, etc.\n- For reaction steps involving only pure solvents, state this as \u2018none\u2019 (as that is stated in another field)\n- If the purity for a compound is not known, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nPro analysis\n99.999; Puris| Tecnical\nUnknown >> Pro analysis; Pro analysis | none",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_reaction_solutions_concentrations",
                        "description": "The concentration of the non-solvent precursor chemicals.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the concentrations associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solution contains several dissolved compounds, e.g. A and B, list the associated concentrations and separate them with semicolons, as in (A; B)\n- The order of the compounds must be the same as in the previous filed.\n- For reaction steps involving only pure solvents, state this as \u2018none\u2019\n- When concentrations are unknown, state that as \u2018nan\u2019\n- Concentrations can be stated in different units suited for different situations. Therefore, specify the unit used. When possible, use one of the preferred units\no M, mM, molal; g/ml, mg/ml, \u00b5g/ml, wt%, mol%, vol%, ppt, ppm, ppb\n- For values with uncertainties, state the best estimate, e.g write 4 wt% and not 3-5 wt%.\nExample\n4 wt%\n0.2 M; 0.15 M| 10 mg/ml\n0.3 mol% | 2 mol%; 0.2 wt% | nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_reaction_solutions_volumes",
                        "description": "The volume of the reaction solutions\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the volumes associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The volumes refer the volumes used, not the volume of the stock solutions. Thus if 0.15 ml of a solution is spin-coated, the volume is 0.15 ml\n- For reaction steps without solvents, state the volume as \u2018nan\u2019\n- When volumes are unknown, state that as \u2018nan\u2019\nExample\n0.1\n0.1 >> 0.05 | 0.05\nnan | 0.15",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_reaction_solutions_age",
                        "description": "The age of the solutions\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the age of the solutions associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- As a general guideline, the age refers to the time from the preparation of the final precursor mixture to the reaction procedure.\n- When the age of a solution is not known, state that as \u2018nan\u2019\n- For reaction steps where no solvents are involved, state this as \u2018nan\u2019\n- For solutions that is stored a long time, an order of magnitude estimate is adequate.\nExample\n2\n0.25 |1000 >> 10000\nnan | nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_reaction_solutions_temperature",
                        "description": "The temperature of the reaction solutions.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the temperatures of the solutions associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a reaction solution undergoes a temperature program, list the temperatures (e.g. start, end, and other important points) and separate them with semicolons, e.g. 25; 100\n- When the temperature of a solution is unknown, state that as \u2018nan\u2019\n- For reaction steps where no solvents are involved, state the temperature of the gas or the solid if that make sense. Otherwise state this as \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 120 and not 110-130.\n- Assume an undetermined room temperature to be 25\nExample\n25\n100; 50 | 25\nnan | 25 >> 25",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_substrate_temperature",
                        "description": "The temperature of the substrate.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the temperatures of the substrates (i.e. the last deposited layer) associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The temperature of the substrate refers to the temperature when the deposition of the layer is occurring.\n- If a substrate undergoes a temperature program before the deposition, list the temperatures (e.g. start, end, and other important points) and separate them with semicolons (e.g. 25; 100)\n- When the temperature of a substrate is not known, state that as \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 120 and not 110-130.\n- Assume that an undetermined room temperature is 25\nExample\n25\nnan\n125; 325; 375; 450 | 25 >> 25",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_thermal_annealing_temperature",
                        "description": "The temperatures of the thermal annealing program associated with depositing the layers\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the annealing temperatures associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If the thermal annealing involves a temperature program with multiple temperature stages, list the temperatures (e.g. start, end, and other important points) and separate them with semicolons (e.g. 25; 100)\n- For values with uncertainties, state the best estimate, e.g. write 120 and not 110-130.\n- If no thermal annealing is occurring after the deposition of a layer, state that by stating the room temperature (assumed to 25\u00b0C if not further specified)\n- If the thermal annealing program is not known, state that by \u2018nan\u2019\nExample\n25\n50 | nan\n450 | 125; 325; 375; 450 >> 125; 325; 375; 450",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_thermal_annealing_time",
                        "description": "The time program associated to the thermal annealing program.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the annealing times associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If the thermal annealing involves a temperature program with multiple temperature stages, list the associated times at those temperatures and separate them with semicolons.\n- The annealing times must align in terms of layers\u00b8 reaction steps and annealing temperatures in the previous filed.\n- If a time is not known, state that by \u2018nan\u2019\n- If no thermal annealing is occurring after the deposition of a layer, state that by \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 20 and not 10-30.\nExample\nnan\n60 | 1000\n30 | 5; 5; 5; 30 >> 5; 5; 5; 30",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "deposition_thermal_annealing_atmosphere",
                        "description": "The atmosphere during thermal annealing\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the atmospheres associated to each annelaing step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- If the atmosphere is a mixture of different gases, i.e. A and B, list the gases in alphabetic order and separate them with semicolons, as in (A; B)\n- \u201cDry air\u201d represent air with low relative humidity but where the relative humidity is not known\n- \u201cAmbient\u201d represent air where the relative humidity is not known. For ambient conditions where the relative humidity is known, state this as \u201cAir\u201d\n- \u201cVacuum\u201d (of unspecified pressure) is for this purpose considered as an atmospheric gas.\n- This is often the same as the atmosphere under which the deposition is occurring, but not always.\n- This category was included after the projects initial phase wherefor the list of reported categories is\nshort. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nN2\nVacuum | N2\nAir | Ar >> Ar",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "storage_time_until_next_deposition_step",
                        "description": "The time between the back contact is finalised and the next layer is deposited\n- If there are uncertainties, only state the best estimate, e.g. write 35 and not 20-50.\n- If this is the last layer in the stack, state this as \u2018nan\u2019",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "storage_atmosphere",
                        "description": "The atmosphere in which the sample with the finalised back contact is stored until the next deposition step or device performance measurement\nExample\nAir\nN2\nVacuum",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "storage_relative_humidity",
                        "description": "The relive humidity under which the sample with the finalised back contact is stored until the next deposition step or device performance measurement\n- If there are uncertainties, only state the best estimate, e.g write 35 and not 20-50.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "surface_treatment_before_next_deposition_step",
                        "description": "Description of any type of surface treatment or other treatment the sample with the finalised back contact is stored until the next deposition step or device performance measurement\n- If more than one treatment, list the treatments and separate them by a double forward angel bracket (\u2018 >> \u2018)\n- If no special treatment, state that as \u2018none\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is\nshort. Thus, be prepared to expand the given list of alternatives in the data template.\nExample:\nnone\nAr plasma\nUV-ozone",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    }
                ],
                "sub_sections": []
            }
        },
        {
            "name": "add",
            "sub_section": {
                "name": "Add",
                "description": "A section to describe **additional layers** present in the device besides the *Substrate*, *ETL*, *Perovskite*, *HTL* and *back contact*.",
                "quantities": [
                    {
                        "name": "lay_front",
                        "description": "TRUE if there is a functional layer below the substrate, i.e. on the opposite side of the substrate from with respect to the perovskite.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_function",
                        "description": "The function of the additional layers on the substrate side\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- If a layer has more than one function, e.g. A and B, list the functions in order and separate them with semicolons, as in (A; B)\nExample:\nA.R.C.\nBack reflection\nDown conversion\nEncapsulation\nLight management\nUpconversion",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_stack_sequence",
                        "description": "The stack sequence describing the additional layers on the substrate side\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- If two materials, e.g. A and B, are mixed in one layer, list the materials in alphabetic order and separate them with semicolons, as in (A; B)\n- Use common abbreviations when appropriate but spell it out if risk for confusion.\n- There are separate filed for doping. Indicate doping with colons. E.g. wither aluminium doped NiO-np as Al:NiO-np\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample:\nMgF2\nAu-np\nNaYF4:Eu-np",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_thickness_list",
                        "description": "A list of thicknesses of the individual layers in the stack.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- The layers must line up with the previous filed.\n- State thicknesses in nm\n- Every layer in the stack have a thickness. If it is unknown, state this as \u2018nan\u2019\n- If there are uncertainties, state the best estimate, e.g write 100 and not 90-110\nExample\n200\nnan |250\n100 | 5 | 8",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_additives_compounds",
                        "description": "List of the dopants and additives that are in each layer of the HTL-stack\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- The layers must line up with the previous fields.\n- If several dopants/additives, e.g. A and B, are present in one layer, list the dopants/additives in alphabetic order and separate them with semicolons, as in (A; B)\n- If no dopants/additives, state that as \u201cUndoped\u201d\n- If the doping situation is unknown, stat that as\u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is\nshort. Thus, be prepared to expand the given list of alternatives in the data template, even if to most common back contacts is undoped metals\nExample\nCuS\nB; P\nAu-np | Undoped",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_additives_concentrations",
                        "description": "The concentration of the dopants/additives.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- If more than one dopant/additive in the layer, e.g. A and B, separate the concentration for each dopant/additive with semicolons, as in (A; B)\n- For each dopant/additive in the layer, state the concentration.\n- The order of the dopants/additives must be the same as in the previous filed.\n- For layers with no dopants/additives, state this as \u2018none\u2019\n- When concentrations are unknown, state that as \u2018nan\u2019\n- Concentrations can be stated in different units suited for different situations. Therefore, specify the unit used.\n- The preferred way to state the concentration of a dopant/additive is to refer to the amount in the final product, i.e. the material in the layer. When possible, use on the preferred units\no wt%, mol%, vol%, ppt, ppm, ppb\n- When the concentration of the dopant/additive in the final product is unknown, but where the concentration of the dopant/additive in the solution is known, state that concentration instead. When possible, use on the preferred units\no M, mM, molal; g/ml, mg/ml, \u00b5g/ml\n- For values with uncertainties, state the best estimate, e.g write 4 wt% and not 3-5 wt%.\nExample\n4 wt%\n5 vol%; nan | 10 mg/ml\n0.3 mol% | 2 mol%; 0.2 wt% | 0.3 M",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_deposition_procedure",
                        "description": "The deposition procedures for the HTL-stack.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate them by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- Thermal annealing is generally not considered as an individual reaction step. The philosophy behind this is that every deposition step has a thermal history, which is specified in a separate filed. In exceptional cases with thermal annealing procedures clearly disconnected from other procedures, state \u2018Thermal annealing\u2019 as a separate reaction step.\n- Please read the instructions under \u201cPerovskite. Deposition. Procedure\u201d for descriptions and distinctions between common deposition procedures and how they should be labelled for consistency in the database.\n- A few additional clarifications:\n- Lamination\no A readymade film is transferred directly to the device stack. A rather broad concept. An everyday kitchen related example of lamination would eb to place a thin plastic film over a slice of pie.\n- Sandwiching\no When a readymade top stack simply is placed on top of the device stack. Could be held together with clams. The typical example is a when a \u201cCarbon | FTO | SLG\u201d is placed on top of the device stack. Standard procedure in the DSSC filed.\nExample\nEvaporation\nEvaporation | Evaporation\nDoctor blading\nScreen printing\nSputtering\nLamination\nE-beam evaporation\nSandwiching",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_deposition_aggregation_state_of_reactants",
                        "description": "The physical state of the reactants.\n- The three basic categories are Solid/Liquid/Gas\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the aggregation state associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- Most cases are clear cut, e.g. spin-coating involves species in solution and evaporation involves species in gas phase. For less clear-cut cases, consider where the reaction really is happening as in:\no For a spray-coating procedure, it is droplets of liquid that enters the substrate (thus a liquid phase reaction)\no For sputtering and thermal evaporation, it is species in gas phase that reaches the substrate (thus a gas phase reaction)\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nLiquid\nGas | Liquid\nLiquid | Liquid >> Liquid",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_deposition_synthesis_atmosphere",
                        "description": "The synthesis atmosphere.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the atmospheres associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- If the synthesis atmosphere is a mixture of different gases, e.g. A and B, list the gases in alphabetic order and separate them with semicolons, as in (A; B)\n- \u201cDry air\u201d represent air with low relative humidity but where the relative humidity is not known\n- \u201cAmbient\u201d represent air where the relative humidity is not known. For ambient conditions where the relative humidity is known, state this as \u201cAir\u201d\n- \u201cVacuum\u201d (of unspecified pressure) is for this purpose considered as an atmospheric gas\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nVacuum\nVacuum | N2\nAir | Ar; H2O >> Ar",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_deposition_synthesis_atmosphere_pressure_total",
                        "description": "The total gas pressure during each reaction step\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the pressures associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- Pressures can be stated in different units suited for different situations. Therefore, specify the unit. The preferred units are:\no atm, bar, mbar, mmHg, Pa, torr, psi\n- If a pressure is not known, stat that as \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 100 pa and not 80-120 pa.\nExample\n1 atm\n0.002 torr | 10000 Pa\nnan >> 1 atm | 1 atm",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_deposition_synthesis_atmosphere_pressure_partial",
                        "description": "The partial pressures for the gases present during each reaction step.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the pressures associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- If the synthesis atmosphere is a mixture of different gases, e.g. A and B, list the partial pressures and separate them with semicolons, as in (A; B). The list of partial pressures must line up with the gases they describe.\n- In cases where no gas mixtures are used, this field will be the same as the previous filed.\nExample\n1 atm\n0.002 torr | 10000 Pa\nnan >> 0.99 atm; 0.01 atm | 1 atm",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_deposition_synthesis_atmosphere_relative_humidity",
                        "description": "The relative humidity during each deposition step\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the relative humidity associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns\n- If the relative humidity for a step is not known, stat that as \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 35 and not 30-40.\nExample\n35\n0 | 20\nnan >> 25 | 0",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_deposition_solvents",
                        "description": "The solvents used in each deposition procedure for each layer in the stack\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the solvents associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solvent is a mixture of different solvents, e.g. A and B, list the solvents in alphabetic order and separate them with semicolons, as in (A; B)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- For non-liquid processes with no solvents, state the solvent as \u2018none\u2019\n- If the solvent is not known, state this as \u2018Unknown\u2019\n- Use common abbreviations when appropriate but spell it out when risk for confusion\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nnone\nAcetonitile; Ethanol | Chlorobenzene\nnone >> Ethanol; Methanol; H2O | DMF; DMSO",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_deposition_solvents_mixing_ratios",
                        "description": "The mixing ratios for mixed solvents\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the solvent mixing ratios associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- For pure solvents, state the mixing ratio as 1\n- For non-solvent processes, state the mixing ratio as 1\n- For unknown mixing ratios, state the mixing ratio as \u2018nan\u2019\n- For solvent mixtures, i.e. A and B, state the mixing ratios by using semicolons, as in (VA; VB)\n- The preferred metrics is the volume ratios. If that is not available, mass or mol ratios can be used instead, but it the analysis the mixing ratios will be assumed to be based on volumes.\nExample\n1\n4; 1 | 1\n1 >> 5; 2; 0.3 | 2; 1",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_deposition_solvents_supplier",
                        "description": "The suppliers of all the solvents.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the solvent suppliers associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solvent is a mixture of different solvents, e.g. A and B, list the associated suppliers and separate them with semicolons, as in (A; B)\n- The number and order of layers, reaction steps, and solvents must line up with the previous columns.\n- For non-liquid processes with no solvents, mark the supplier as \u2018none\u2019\n- If the supplier for a solvent is unknown, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nSigma Aldrich\nSigma Aldrich; Fisher | Acros\nnone >> Sigma Aldrich; Sigma Aldrich | Unknown",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_deposition_solvents_purity",
                        "description": "The purity of the solvents used.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the solvent purities associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solvent is a mixture of different solvents, e.g. A and B, list the associated purities and separate them with semicolons, as in (A; B)\n- The number and order of layers, reaction steps, and solvents must line up with the previous columns.\n- Use standard nomenclature for purities, e.g. pro analysis, puris, extra dry, etc.\n- For non-liquid processes with no solvents, state the purity as \u2018none\u2019\n- If the purity for a solvent is not known, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nPro analysis\nPuris; Puris| Tecnical\nnone >> Pro analysis; Pro analysis | Unknown",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_deposition_reaction_solutions_compounds",
                        "description": "The non-solvent precursor chemicals used in each reaction step\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the non-solvent chemicals associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solution contains several compounds, e.g. A and B, list the associated compounds in alphabetic order and separate them with semicolons, as in (A; B)\n- Note that also dopants/additives should be included\n- When several precursor solutions are made and mixed before the reaction step, it is the properties of the final mixture used in the reaction we here describe.\n- The number and order of layers and reaction steps must line up with the previous columns.\n- For gas phase reactions, state the reaction gases as if they were in solution.\n- For solid-state reactions, state the compounds as if they were in solution.\n- For reaction steps involving only pure solvents, state this as \u2018none\u2019\n- If the compounds for a deposition step is not known, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nAu\nCuI\nAg",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_deposition_reaction_solutions_compounds_supplier",
                        "description": "The suppliers of the non-solvent chemicals.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the non-solvent chemical suppliers associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solution contains several dissolved compounds, e.g. A and B, list the associated suppliers and separate them with semicolons, as in (A; B)\n- The number and order of layers, reaction steps, and solvents must line up with the previous columns.\n- For gas phase reactions, state the suppliers for the gases or the targets/evaporation sources that are evaporated/sputtered/etc.\n- For solid state reactions, state the suppliers for the compounds in the same way.\n- For reaction steps involving only pure solvents, state the supplier as \u2018none\u2019 (as that that is entered in a separate filed)\n- For chemicals that are lab made, state that as \u201cLab made\u201d or \u201cLab made (name of lab)\u201d\n- If the supplier for a compound is unknown, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nDysole; Sigma Aldrich; Dyenamo; Sigma Aldrich\nSigma Aldrich; Fisher | Acros\nLab made (EPFL) | Sigma Aldrich >> none",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_deposition_reaction_solutions_compounds_purity",
                        "description": "The purity of the non-solvent chemicals.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the compound purities associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solution contains several dissolved compounds, i.e. A and B, list the associated purities and separate them with semicolons, as in (A; B)\n- The number and order of layers, reaction steps, and solvents must line up with the previous columns.\n- Use standard nomenclature for purities, e.g. pro analysis, puris, extra dry, etc.\n- For reaction steps involving only pure solvents, state this as \u2018none\u2019 (as that is stated in another field)\n- If the purity for a compound is not known, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nPro analysis\n99.999; Puris| Tecnical\nUnknown >> Pro analysis; Pro analysis | none",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_deposition_reaction_solutions_concentrations",
                        "description": "The concentration of the non-solvent precursor chemicals.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the concentrations associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solution contains several dissolved compounds, e.g. A and B, list the associated concentrations and separate them with semicolons, as in (A; B)\n- The order of the compounds must be the same as in the previous filed.\n- For reaction steps involving only pure solvents, state this as \u2018none\u2019\n- When concentrations are unknown, state that as \u2018nan\u2019\n- Concentrations can be stated in different units suited for different situations. Therefore, specify the unit used. When possible, use one of the preferred units\no M, mM, molal; g/ml, mg/ml, \u00b5g/ml, wt%, mol%, vol%, ppt, ppm, ppb\n- For values with uncertainties, state the best estimate, e.g write 4 wt% and not 3-5 wt%.\nExample\n4 wt%\n0.2 M; 0.15 M| 10 mg/ml\n0.3 mol% | 2 mol%; 0.2 wt% | nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_deposition_reaction_solutions_volumes",
                        "description": "The volume of the reaction solutions\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the volumes associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The volumes refer the volumes used, not the volume of the stock solutions. Thus if 0.15 ml of a solution is spin-coated, the volume is 0.15 ml\n- For reaction steps without solvents, state the volume as \u2018nan\u2019\n- When volumes are unknown, state that as \u2018nan\u2019\nExample\n0.1\n0.1 >> 0.05 | 0.05\nnan | 0.15",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_deposition_reaction_solutions_age",
                        "description": "The age of the solutions\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the age of the solutions associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- As a general guideline, the age refers to the time from the preparation of the final precursor mixture to the reaction procedure.\n- When the age of a solution is not known, state that as \u2018nan\u2019\n- For reaction steps where no solvents are involved, state this as \u2018nan\u2019\n- For solutions that is stored a long time, an order of magnitude estimate is adequate.\nExample\n2\n0.25 |1000 >> 10000\nnan | nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_deposition_reaction_solutions_temperature",
                        "description": "The temperature of the reaction solutions.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the temperatures of the solutions associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a reaction solution undergoes a temperature program, list the temperatures (e.g. start, end, and other important points) and separate them with semicolons, e.g. 25; 100\n- When the temperature of a solution is unknown, state that as \u2018nan\u2019\n- For reaction steps where no solvents are involved, state the temperature of the gas or the solid if that make sense. Otherwise state this as \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 120 and not 110-130.\n- Assume an undetermined room temperature to be 25\nExample\n25\n100; 50 | 25\nnan | 25 >> 25",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_deposition_substrate_temperature",
                        "description": "The temperature of the substrate.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the temperatures of the substrates (i.e. the last deposited layer) associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The temperature of the substrate refers to the temperature when the deposition of the layer is occurring.\n- If a substrate undergoes a temperature program before the deposition, list the temperatures (e.g. start, end, and other important points) and separate them with semicolons (e.g. 25; 100)\n- When the temperature of a substrate is not known, state that as \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 120 and not 110-130.\n- Assume that an undetermined room temperature is 25\nExample\n25\nnan\n125; 325; 375; 450 | 25 >> 25",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_deposition_thermal_annealing_temperature",
                        "description": "The temperatures of the thermal annealing program associated with depositing the layers\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the annealing temperatures associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If the thermal annealing involves a temperature program with multiple temperature stages, list the temperatures (e.g. start, end, and other important points) and separate them with semicolons (e.g. 25; 100)\n- For values with uncertainties, state the best estimate, e.g. write 120 and not 110-130.\n- If no thermal annealing is occurring after the deposition of a layer, state that by stating the room temperature (assumed to 25\u00b0C if not further specified)\n- If the thermal annealing program is not known, state that by \u2018nan\u2019\nExample\n25\n50 | nan\n450 | 125; 325; 375; 450 >> 125; 325; 375; 450",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_deposition_thermal_annealing_time",
                        "description": "The time program associated to the thermal annealing program.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the annealing times associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If the thermal annealing involves a temperature program with multiple temperature stages, list the associated times at those temperatures and separate them with semicolons.\n- The annealing times must align in terms of layers\u00b8 reaction steps and annealing temperatures in the previous filed.\n- If a time is not known, state that by \u2018nan\u2019\n- If no thermal annealing is occurring after the deposition of a layer, state that by \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 20 and not 10-30.\nExample\nnan\n60 | 1000\n30 | 5; 5; 5; 30 >> 5; 5; 5; 30",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_deposition_thermal_annealing_atmosphere",
                        "description": "The atmosphere during thermal annealing\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the atmospheres associated to each annelaing step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- If the atmosphere is a mixture of different gases, i.e. A and B, list the gases in alphabetic order and separate them with semicolons, as in (A; B)\n- \u201cDry air\u201d represent air with low relative humidity but where the relative humidity is not known\n- \u201cAmbient\u201d represent air where the relative humidity is not known. For ambient conditions where the relative humidity is known, state this as \u201cAir\u201d\n- \u201cVacuum\u201d (of unspecified pressure) is for this purpose considered as an atmospheric gas.\n- This is often the same as the atmosphere under which the deposition is occurring, but not always.\n- This category was included after the projects initial phase wherefor the list of reported categories is\nshort. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nN2\nVacuum | N2\nAir | Ar >> Ar",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_storage_time_until_next_deposition_step",
                        "description": "The time between the back contact is finalised and the next layer is deposited\n- If there are uncertainties, only state the best estimate, e.g. write 35 and not 20-50.\n- If this is the last layer in the stack, state this as \u2018nan\u2019",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_storage_atmosphere",
                        "description": "The atmosphere in which the sample with the finalised back contact is stored until the next deposition step or device performance measurement\nExample\nAir\nN2\nVacuum",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_storage_relative_humidity",
                        "description": "The relive humidity under which the sample with the finalised back contact is stored until the next deposition step or device performance measurement\n- If there are uncertainties, only state the best estimate, e.g write 35 and not 20-50.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_front_surface_treatment_before_next_deposition_step",
                        "description": "Description of any type of surface treatment or other treatment the sample with the finalised back contact is stored until the next deposition step or device performance measurement\n- If more than one treatment, list the treatments and separate them by a double forward angel bracket (\u2018 >> \u2018)\n- If no special treatment, state that as \u2018none\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is\nshort. Thus, be prepared to expand the given list of alternatives in the data template.\nExample:\nnone\nAr plasma\nUV-ozone",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back",
                        "description": "TRUE if there is a functional layer above the back contact, i.e. layers deposited after the back contact has been finalised.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_function",
                        "description": "The function of the additional layers on the backcontact side.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- If a layer has more than one function, e.g. A and B, list the functions in order and separate them with semicolons, as in (A; B)\nExample:\nA.R.C.\nBack reflection\nDown conversion\nEncapsulation\nLight management\nUpconversion",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_stack_sequence",
                        "description": "The stack sequence describing the additional layers on the backcontact side.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- If two materials, e.g. A and B, are mixed in one layer, list the materials in alphabetic order and separate them with semicolons, as in (A; B)\n- Use common abbreviations when appropriate but spell it out if risk for confusion.\n- There are now separate filed for doping. Indicate doping with colons. E.g. wither aluminium doped NiO-np as Al:NiO-np\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_thickness_list",
                        "description": "A list of thicknesses of the individual layers in the stack.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- The layers must line up with the previous filed.\n- State thicknesses in nm\n- Every layer in the stack have a thickness. If it is unknown, state this as \u2018nan\u2019\n- If there are uncertainties, state the best estimate, e.g write 100 and not 90-110",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_additives_compounds",
                        "description": "List of the dopants and additives that are in each layer of the HTL-stack\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- The layers must line up with the previous fields.\n- If several dopants/additives, e.g. A and B, are present in one layer, list the dopants/additives in alphabetic order and separate them with semicolons, as in (A; B)\n- If no dopants/additives, state that as \u201cUndoped\u201d\n- If the doping situation is unknown, stat that as\u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is\nshort. Thus, be prepared to expand the given list of alternatives in the data template, even if to most common back contacts is undoped metals\nExample\nCuS\nB; P\nAu-np | Undoped",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_additives_concentrations",
                        "description": "The concentration of the dopants/additives.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- If more than one dopant/additive in the layer, e.g. A and B, separate the concentration for each dopant/additive with semicolons, as in (A; B)\n- For each dopant/additive in the layer, state the concentration.\n- The order of the dopants/additives must be the same as in the previous filed.\n- For layers with no dopants/additives, state this as \u2018none\u2019\n- When concentrations are unknown, state that as \u2018nan\u2019\n- Concentrations can be stated in different units suited for different situations. Therefore, specify the unit used.\n- The preferred way to state the concentration of a dopant/additive is to refer to the amount in the final product, i.e. the material in the layer. When possible, use on the preferred units\no wt%, mol%, vol%, ppt, ppm, ppb\n- When the concentration of the dopant/additive in the final product is unknown, but where the concentration of the dopant/additive in the solution is known, state that concentration instead. When possible, use on the preferred units\no M, mM, molal; g/ml, mg/ml, \u00b5g/ml\n- For values with uncertainties, state the best estimate, e.g write 4 wt% and not 3-5 wt%.\nExample\n4 wt%\n5 vol%; nan | 10 mg/ml\n0.3 mol% | 2 mol%; 0.2 wt% | 0.3 M",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_deposition_procedure",
                        "description": "The deposition procedures for the HTL-stack.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate them by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- Thermal annealing is generally not considered as an individual reaction step. The philosophy behind this is that every deposition step has a thermal history, which is specified in a separate filed. In exceptional cases with thermal annealing procedures clearly disconnected from other procedures, state \u2018Thermal annealing\u2019 as a separate reaction step.\n- Please read the instructions under \u201cPerovskite. Deposition. Procedure\u201d for descriptions and distinctions between common deposition procedures and how they should be labelled for consistency in the database.\n- A few additional clarifications:\n- Lamination\no A readymade film is transferred directly to the device stack. A rather broad concept. An everyday kitchen related example of lamination would eb to place a thin plastic film over a slice of pie.\n- Sandwiching\no When a readymade top stack simply is placed on top of the device stack. Could be held together with clams. The typical example is a when a \u201cCarbon | FTO | SLG\u201d is placed on top of the device stack. Standard procedure in the DSSC filed.\nExample\nEvaporation\nEvaporation | Evaporation\nDoctor blading\nScreen printing\nSputtering\nLamination\nE-beam evaporation\nSandwiching",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_deposition_aggregation_state_of_reactants",
                        "description": "The physical state of the reactants.\n- The three basic categories are Solid/Liquid/Gas\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the aggregation state associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- Most cases are clear cut, e.g. spin-coating involves species in solution and evaporation involves species in gas phase. For less clear-cut cases, consider where the reaction really is happening as in:\no For a spray-coating procedure, it is droplets of liquid that enters the substrate (thus a liquid phase reaction)\no For sputtering and thermal evaporation, it is species in gas phase that reaches the substrate (thus a gas phase reaction)\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nLiquid\nGas | Liquid\nLiquid | Liquid >> Liquid",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_deposition_synthesis_atmosphere",
                        "description": "The synthesis atmosphere.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the atmospheres associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- If the synthesis atmosphere is a mixture of different gases, e.g. A and B, list the gases in alphabetic order and separate them with semicolons, as in (A; B)\n- \u201cDry air\u201d represent air with low relative humidity but where the relative humidity is not known\n- \u201cAmbient\u201d represent air where the relative humidity is not known. For ambient conditions where the relative humidity is known, state this as \u201cAir\u201d\n- \u201cVacuum\u201d (of unspecified pressure) is for this purpose considered as an atmospheric gas\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nVacuum\nVacuum | N2\nAir | Ar; H2O >> Ar",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_deposition_synthesis_atmosphere_pressure_total",
                        "description": "The total gas pressure during each reaction step\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the pressures associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- Pressures can be stated in different units suited for different situations. Therefore, specify the unit. The preferred units are:\no atm, bar, mbar, mmHg, Pa, torr, psi\n- If a pressure is not known, stat that as \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 100 pa and not 80-120 pa.\nExample\n1 atm\n0.002 torr | 10000 Pa\nnan >> 1 atm | 1 atm",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_deposition_synthesis_atmosphere_pressure_partial",
                        "description": "The partial pressures for the gases present during each reaction step.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the pressures associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- If the synthesis atmosphere is a mixture of different gases, e.g. A and B, list the partial pressures and separate them with semicolons, as in (A; B). The list of partial pressures must line up with the gases they describe.\n- In cases where no gas mixtures are used, this field will be the same as the previous filed.\nExample\n1 atm\n0.002 torr | 10000 Pa\nnan >> 0.99 atm; 0.01 atm | 1 atm",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_deposition_synthesis_atmosphere_relative_humidity",
                        "description": "The relative humidity during each deposition step\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the relative humidity associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns\n- If the relative humidity for a step is not known, stat that as \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 35 and not 30-40.\nExample\n35\n0 | 20\nnan >> 25 | 0",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_deposition_solvents",
                        "description": "The solvents used in each deposition procedure for each layer in the stack\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the solvents associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solvent is a mixture of different solvents, e.g. A and B, list the solvents in alphabetic order and separate them with semicolons, as in (A; B)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- For non-liquid processes with no solvents, state the solvent as \u2018none\u2019\n- If the solvent is not known, state this as \u2018Unknown\u2019\n- Use common abbreviations when appropriate but spell it out when risk for confusion\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nnone\nAcetonitile; Ethanol | Chlorobenzene\nnone >> Ethanol; Methanol; H2O | DMF; DMSO",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_deposition_solvents_mixing_ratios",
                        "description": "The mixing ratios for mixed solvents\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the solvent mixing ratios associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- For pure solvents, state the mixing ratio as 1\n- For non-solvent processes, state the mixing ratio as 1\n- For unknown mixing ratios, state the mixing ratio as \u2018nan\u2019\n- For solvent mixtures, i.e. A and B, state the mixing ratios by using semicolons, as in (VA; VB)\n- The preferred metrics is the volume ratios. If that is not available, mass or mol ratios can be used instead, but it the analysis the mixing ratios will be assumed to be based on volumes.\nExample\n1\n4; 1 | 1\n1 >> 5; 2; 0.3 | 2; 1",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_deposition_solvents_supplier",
                        "description": "The suppliers of all the solvents.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the solvent suppliers associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solvent is a mixture of different solvents, e.g. A and B, list the associated suppliers and separate them with semicolons, as in (A; B)\n- The number and order of layers, reaction steps, and solvents must line up with the previous columns.\n- For non-liquid processes with no solvents, mark the supplier as \u2018none\u2019\n- If the supplier for a solvent is unknown, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nSigma Aldrich\nSigma Aldrich; Fisher | Acros\nnone >> Sigma Aldrich; Sigma Aldrich | Unknown",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_deposition_solvents_purity",
                        "description": "The purity of the solvents used.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the solvent purities associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solvent is a mixture of different solvents, e.g. A and B, list the associated purities and separate them with semicolons, as in (A; B)\n- The number and order of layers, reaction steps, and solvents must line up with the previous columns.\n- Use standard nomenclature for purities, e.g. pro analysis, puris, extra dry, etc.\n- For non-liquid processes with no solvents, state the purity as \u2018none\u2019\n- If the purity for a solvent is not known, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nPro analysis\nPuris; Puris| Tecnical\nnone >> Pro analysis; Pro analysis | Unknown",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_deposition_reaction_solutions_compounds",
                        "description": "The non-solvent precursor chemicals used in each reaction step\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the non-solvent chemicals associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solution contains several compounds, e.g. A and B, list the associated compounds in alphabetic order and separate them with semicolons, as in (A; B)\n- Note that also dopants/additives should be included\n- When several precursor solutions are made and mixed before the reaction step, it is the properties of the final mixture used in the reaction we here describe.\n- The number and order of layers and reaction steps must line up with the previous columns.\n- For gas phase reactions, state the reaction gases as if they were in solution.\n- For solid-state reactions, state the compounds as if they were in solution.\n- For reaction steps involving only pure solvents, state this as \u2018none\u2019\n- If the compounds for a deposition step is not known, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nAu\nCuI\nAg",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_deposition_reaction_solutions_compounds_supplier",
                        "description": "The suppliers of the non-solvent chemicals.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the non-solvent chemical suppliers associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solution contains several dissolved compounds, e.g. A and B, list the associated suppliers and separate them with semicolons, as in (A; B)\n- The number and order of layers, reaction steps, and solvents must line up with the previous columns.\n- For gas phase reactions, state the suppliers for the gases or the targets/evaporation sources that are evaporated/sputtered/etc.\n- For solid state reactions, state the suppliers for the compounds in the same way.\n- For reaction steps involving only pure solvents, state the supplier as \u2018none\u2019 (as that that is entered in a separate filed)\n- For chemicals that are lab made, state that as \u201cLab made\u201d or \u201cLab made (name of lab)\u201d\n- If the supplier for a compound is unknown, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nDysole; Sigma Aldrich; Dyenamo; Sigma Aldrich\nSigma Aldrich; Fisher | Acros\nLab made (EPFL) | Sigma Aldrich >> none",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_deposition_reaction_solutions_compounds_purity",
                        "description": "The purity of the non-solvent chemicals.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the compound purities associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solution contains several dissolved compounds, i.e. A and B, list the associated purities and separate them with semicolons, as in (A; B)\n- The number and order of layers, reaction steps, and solvents must line up with the previous columns.\n- Use standard nomenclature for purities, e.g. pro analysis, puris, extra dry, etc.\n- For reaction steps involving only pure solvents, state this as \u2018none\u2019 (as that is stated in another field)\n- If the purity for a compound is not known, state this as \u2018Unknown\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is short. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nPro analysis\n99.999; Puris| Tecnical\nUnknown >> Pro analysis; Pro analysis | none",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_deposition_reaction_solutions_concentrations",
                        "description": "The concentration of the non-solvent precursor chemicals.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the concentrations associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a solution contains several dissolved compounds, e.g. A and B, list the associated concentrations and separate them with semicolons, as in (A; B)\n- The order of the compounds must be the same as in the previous filed.\n- For reaction steps involving only pure solvents, state this as \u2018none\u2019\n- When concentrations are unknown, state that as \u2018nan\u2019\n- Concentrations can be stated in different units suited for different situations. Therefore, specify the unit used. When possible, use one of the preferred units\no M, mM, molal; g/ml, mg/ml, \u00b5g/ml, wt%, mol%, vol%, ppt, ppm, ppb\n- For values with uncertainties, state the best estimate, e.g write 4 wt% and not 3-5 wt%.\nExample\n4 wt%\n0.2 M; 0.15 M| 10 mg/ml\n0.3 mol% | 2 mol%; 0.2 wt% | nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_deposition_reaction_solutions_volumes",
                        "description": "The volume of the reaction solutions\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the volumes associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The volumes refer the volumes used, not the volume of the stock solutions. Thus if 0.15 ml of a solution is spin-coated, the volume is 0.15 ml\n- For reaction steps without solvents, state the volume as \u2018nan\u2019\n- When volumes are unknown, state that as \u2018nan\u2019\nExample\n0.1\n0.1 >> 0.05 | 0.05\nnan | 0.15",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_deposition_reaction_solutions_age",
                        "description": "The age of the solutions\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the age of the solutions associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- As a general guideline, the age refers to the time from the preparation of the final precursor mixture to the reaction procedure.\n- When the age of a solution is not known, state that as \u2018nan\u2019\n- For reaction steps where no solvents are involved, state this as \u2018nan\u2019\n- For solutions that is stored a long time, an order of magnitude estimate is adequate.\nExample\n2\n0.25 |1000 >> 10000\nnan | nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_deposition_reaction_solutions_temperature",
                        "description": "The temperature of the reaction solutions.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the temperatures of the solutions associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If a reaction solution undergoes a temperature program, list the temperatures (e.g. start, end, and other important points) and separate them with semicolons, e.g. 25; 100\n- When the temperature of a solution is unknown, state that as \u2018nan\u2019\n- For reaction steps where no solvents are involved, state the temperature of the gas or the solid if that make sense. Otherwise state this as \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 120 and not 110-130.\n- Assume an undetermined room temperature to be 25\nExample\n25\n100; 50 | 25\nnan | 25 >> 25",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_deposition_substrate_temperature",
                        "description": "The temperature of the substrate.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the temperatures of the substrates (i.e. the last deposited layer) associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The temperature of the substrate refers to the temperature when the deposition of the layer is occurring.\n- If a substrate undergoes a temperature program before the deposition, list the temperatures (e.g. start, end, and other important points) and separate them with semicolons (e.g. 25; 100)\n- When the temperature of a substrate is not known, state that as \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 120 and not 110-130.\n- Assume that an undetermined room temperature is 25\nExample\n25\nnan\n125; 325; 375; 450 | 25 >> 25",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_deposition_thermal_annealing_temperature",
                        "description": "The temperatures of the thermal annealing program associated with depositing the layers\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the annealing temperatures associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If the thermal annealing involves a temperature program with multiple temperature stages, list the temperatures (e.g. start, end, and other important points) and separate them with semicolons (e.g. 25; 100)\n- For values with uncertainties, state the best estimate, e.g. write 120 and not 110-130.\n- If no thermal annealing is occurring after the deposition of a layer, state that by stating the room temperature (assumed to 25\u00b0C if not further specified)\n- If the thermal annealing program is not known, state that by \u2018nan\u2019\nExample\n25\n50 | nan\n450 | 125; 325; 375; 450 >> 125; 325; 375; 450",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_deposition_thermal_annealing_time",
                        "description": "The time program associated to the thermal annealing program.\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the annealing times associated to each reaction step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If the thermal annealing involves a temperature program with multiple temperature stages, list the associated times at those temperatures and separate them with semicolons.\n- The annealing times must align in terms of layers\u00b8 reaction steps and annealing temperatures in the previous filed.\n- If a time is not known, state that by \u2018nan\u2019\n- If no thermal annealing is occurring after the deposition of a layer, state that by \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 20 and not 10-30.\nExample\nnan\n60 | 1000\n30 | 5; 5; 5; 30 >> 5; 5; 5; 30",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_deposition_thermal_annealing_atmosphere",
                        "description": "The atmosphere during thermal annealing\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- When more than one reaction step, separate the atmospheres associated to each annelaing step by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- The number and order of layers and deposition steps must line up with the previous columns.\n- If the atmosphere is a mixture of different gases, i.e. A and B, list the gases in alphabetic order and separate them with semicolons, as in (A; B)\n- \u201cDry air\u201d represent air with low relative humidity but where the relative humidity is not known\n- \u201cAmbient\u201d represent air where the relative humidity is not known. For ambient conditions where the relative humidity is known, state this as \u201cAir\u201d\n- \u201cVacuum\u201d (of unspecified pressure) is for this purpose considered as an atmospheric gas.\n- This is often the same as the atmosphere under which the deposition is occurring, but not always.\n- This category was included after the projects initial phase wherefor the list of reported categories is\nshort. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nN2\nVacuum | N2\nAir | Ar >> Ar",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_storage_time_until_next_deposition_step",
                        "description": "The time between the back contact is finalised and the next layer is deposited\n- If there are uncertainties, only state the best estimate, e.g. write 35 and not 20-50.\n- If this is the last layer in the stack, state this as \u2018nan\u2019",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_storage_atmosphere",
                        "description": "The atmosphere in which the sample with the finalised back contact is stored until the next deposition step or device performance measurement\nExample\nAir\nN2\nVacuum",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_storage_relative_humidity",
                        "description": "The relive humidity under which the sample with the finalised back contact is stored until the next deposition step or device performance measurement\n- If there are uncertainties, only state the best estimate, e.g write 35 and not 20-50.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "lay_back_surface_treatment_before_next_deposition_step",
                        "description": "Description of any type of surface treatment or other treatment the sample with the finalised back contact is stored until the next deposition step or device performance measurement\n- If more than one treatment, list the treatments and separate them by a double forward angel bracket (\u2018 >> \u2018)\n- If no special treatment, state that as \u2018none\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is\nshort. Thus, be prepared to expand the given list of alternatives in the data template.\nExample:\nnone\nAr plasma\nUV-ozone",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    }
                ],
                "sub_sections": []
            }
        },
        {
            "name": "encapsulation",
            "sub_section": {
                "name": "Encapsulation",
                "description": "A section to describe information about the encapsulation of the device.",
                "quantities": [
                    {
                        "name": "Encapsulation",
                        "description": "TRUE if the cell is encapsulated",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "stack_sequence",
                        "description": "The stack sequence of the encapsulation\n- Every layer should be separated by a space, a vertical bar, and a space, i.e. (\u2018 | \u2018)\n- If two materials, e.g. A and B, are mixed in one layer, list the materials in alphabetic order and separate them with semicolons, as in (A; B)\n- Use common abbreviations when appropriate but spell it out if risk for confusion.\n- There are now separate filed for doping. Indicate doping with colons. E.g. wither aluminium doped NiO-np as Al:NiO-np\nExample:\nSLG\nEpoxy\nCover glass\nPMMA",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "edge_sealing_materials",
                        "description": "Edge sealing materials\n- If two materials, e.g. A and Bare used, list the materials in alphabetic order and separate them with semicolons, as in (A; B)\nExample:\nEpoxy\nSurlyn\nUV-glue",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "atmosphere_for_encapsulation",
                        "description": "The surrounding atmosphere during encapsulation.\n- If the surrounding atmosphere is a mixture of different gases, e.g. A and B, list the gases in alphabetic order and separate them with semicolons, as in (A; B)\n- \u201cDry air\u201d represent air with low relative humidity but where the relative humidity is not known\n- \u201cAmbient\u201d represent air where the relative humidity is not known. For ambient conditions where the relative humidity is known, state this as \u201cAir\u201d\n- \u201cVacuum\u201d (of unspecified pressure) is for this purpose considered as an atmospheric gas\nExample\nN2\nVacuum\nAir",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "water_vapour_transmission_rate",
                        "description": "The water vapour transmission rate trough the encapsulation.\n- If there are uncertainties, only state the best estimate, e.g. write 35 and not 20-50.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": []
                    },
                    {
                        "name": "oxygen_transmission_rate",
                        "description": "The oxygen transmission rate trough the encapsulation.\n- If there are uncertainties, only state the best estimate, e.g. write 35 and not 20-50.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": []
                    }
                ],
                "sub_sections": []
            }
        },
        {
            "name": "jv",
            "sub_section": {
                "name": "JV",
                "description": "This section descirbes the current density *J* and voltage *V* characteristics of the solar cell. It includes the device parameters and information about how the\nmeasurements were performed.",
                "quantities": [
                    {
                        "name": "data_file",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "measured",
                        "description": "TRUE if IV-data has been measured and is reported.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "average_over_n_number_of_cells",
                        "description": "The number of cells the reported IV data is based on.\n- The preferred way to enter data is to give every individual cell its own entry in the data template/data base. If that is done, the data is an average over 1 cell.\n- If the reported IV data is not the data from one individual cell, but an average over N cells. Give the number of cells.\n- If the reported value is an average, but it is unknown over how many cells the value has been averaged (and no good estimate is available), state the number of cells as 2, which is the smallest number of cells that qualifies for an averaging procedure.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "int64"
                        },
                        "shape": []
                    },
                    {
                        "name": "certified_values",
                        "description": "TRUE if the IV data is measured by an independent and certification institute. If your solar simulator is calibrated by a calibrated reference diode, that does not count as a certified result.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "certification_institute",
                        "description": "The name of the certification institute that has measured the certified device.\nExample:\nNewport\nNIM, National Institute of Metrology of China\nKIER, Korea Institute of Energy Research",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "storage_age_of_cell",
                        "description": "The age of the cell with respect to when the last deposition step was finalised.\n- If there are uncertainties, only state the best estimate, e.g. write 3 and not 1-5.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "storage_atmosphere",
                        "description": "The atmosphere in which the sample was stored between the device finalisation and the IV measurement.\n- If the atmosphere is a mixture of different gases, e.g. A and B, list the gases in alphabetic order and separate them with semicolons, as in (A; B)\n- \u201cDry air\u201d represent air with low relative humidity but where the relative humidity is not known\n- \u201cAmbient\u201d represent air where the relative humidity is not known. For ambient conditions where the relative humidity is known, state this as \u201cAir\u201d\n- \u201cVacuum\u201d (of unspecified pressure) is for this purpose considered as an atmospheric gas\n- If the atmosphere has changed during the storing time, separate the different atmospheres by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- This category was included after the projects initial phase wherefor the list of reported categories is\nshort. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nN2\nAir\nN2 >> Air",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "storage_relative_humidity",
                        "description": "The relative humidity in the atmosphere in which the sample was stored between the device finalisation and the IV measurement.\n- If the relative humidity has changed during the storing time, separate the different relative humidity by a double forward angel bracket with one blank space on both sides (\u2018 >> \u2018)\n- If the relative humidity is not known, stat that as \u2018nan\u2019\n- For values with uncertainties, state the best estimate, e.g. write 35 and not 30-40.\nExample\n35\n0\n0 >> 25",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "test_atmosphere",
                        "description": "The atmosphere in which the IV measurement is conducted\n- If the atmosphere is a mixture of different gases, e.g. A and B, list the gases in alphabetic order and separate them with semicolons, as in (A; B)\n- \u201cDry air\u201d represent air with low relative humidity but where the relative humidity is not known\n- \u201cAmbient\u201d represent air where the relative humidity is not known. For ambient conditions where the relative humidity is known, state this as \u201cAir\u201d\n- \u201cVacuum\u201d (of unspecified pressure) is for this purpose considered as an atmospheric gas\nExample\nAir\nN2\nVacuum",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "test_relative_humidity",
                        "description": "The relive humidity in which the IV measurement is conducted\n- If there are uncertainties, only state the best estimate, e.g write 35 and not 20-50.\n- If the relative humidity is not known, stat that as \u2018nan\u2019",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": []
                    },
                    {
                        "name": "test_temperature",
                        "description": "The temperature of the device during the IV-measurement\n- If the temperature is not controlled and not is known, assume a standard room temperature of 25\u00b0C.\n- If there are uncertainties, only state the best estimate, e.g write 35 and not 20-50.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "degree_Celsius"
                    },
                    {
                        "name": "light_source_type",
                        "description": "The type of light source used during the IV-measurement\n- This category was included after the projects initial phase wherefor the list of reported categories is\nshort. Thus, be prepared to expand the given list of alternatives in the data template.\n- The category Solar simulator should only be used when you do not really know which type of light source you have in your solar simulator.\nExample:\nLaser\nMetal halide\nOutdoor\nSolar simulator\nSulfur plasma\nWhite LED\nXenon plasma",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "light_source_brand_name",
                        "description": "The brand name and model number of the light source/solar simulator used\n- This category was included after the projects initial phase wherefor the list of reported categories is\nshort. Thus, be prepared to expand the given list of alternatives in the data template.\nExample:\nNewport model 91192\nNewport AAA\nAtlas suntest",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "light_source_simulator_class",
                        "description": "The class of the solar simulator\n- A three-letter code of As, Bs, and Cs. The order of the letters represents the quality ofspectral match, spatial non-uniformity, and temporal instability\nExample\nAAA\nABB\nCAB",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "light_intensity",
                        "description": "The light intensity during the IV measurement\n- If there are uncertainties, only state the best estimate, e.g. write 100 and not 90-100.\n- Standard AM 1.5 illumination correspond to 100 mW/cm2\n- If you need to convert from illumination given in lux; at 550 nm, 1 mW/cm2 corresponds to 6830 lux. Be aware that the conversion change with the spectrum used. As a rule of thumb for general fluorescent/LED light sources, around 0.31mW corresponded to 1000 lux. If your light intensity is measured in lux, it probably means that your light spectra deviates quite a lot from AM 1.5, wherefore it is very important that you also specify the light spectra in the next column.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "milliwatt / centimeter ** 2"
                    },
                    {
                        "name": "light_spectra",
                        "description": "The light spectrum used (or simulated as best as possible) during the IV measurement\nExample\nAM 1.0\nAM 1.5\nIndoor light\nMonochromatic\nOutdoor\nUV",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "light_wavelength_range",
                        "description": "The wavelength range of the light source\n- Separate the lower and upper bound by a semicolon.\n- For monochromatic light sources, only give the constant value.\n- If there are uncertainties, only state the best estimate, e.g. write 100 and not 90-100.\n- State unknown values as \u2018nan\u2019\nExample:\n330; 1000\n400; nan\n550",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "light_illumination_direction",
                        "description": "The direction of the illumination with respect to the device stack\n- If the cell is illuminated trough the substrate, state this as \u2018Substrate\u2019\n- If the cell is illuminated trough the top contact, state this as \u2018Superstrate\u2019\n- For back contacted cells illuminated from the non-contacted side, state this as \u2018Superstrate\u2019\nExample\nSubstrate\nSuperstrate",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "light_masked_cell",
                        "description": "TRUE if the cell is illuminated trough a mask with an opening that is smaller than the total cell area.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "light_mask_area",
                        "description": "The area of the opening in the mask trough with the cell is illuminated (if there is a mask)\n- If there are uncertainties, only state the best estimate, e.g. write 100 and not 90-100.\n- If there is no light mask, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "centimeter ** 2"
                    },
                    {
                        "name": "scan_speed",
                        "description": "The speed of the potential sweep during the IV measurement",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "millivolt / second"
                    },
                    {
                        "name": "scan_delay_time",
                        "description": "The time at each potential value before integration in the potential sweep.\n- For some potentiostats you need to specify this value, whereas for others it is set automatically and is not directly accessible.\n- If there are uncertainties, only state the best estimate, e.g. write 100 and not 90-100.\n- If unknown, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "millisecond"
                    },
                    {
                        "name": "scan_integration_time",
                        "description": "The integration time at each potential value in the potential sweep.\n- For some potentiostats you need to specify this value, whereas for others it is set automatically and is not directly accessible.\n- If there are uncertainties, only state the best estimate, e.g. write 100 and not 90-100.\n- If unknown, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "millisecond"
                    },
                    {
                        "name": "scan_voltage_step",
                        "description": "The distance between the measurement point in the potential sweep\n- If unknown, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "millivolt"
                    },
                    {
                        "name": "preconditioning_protocol",
                        "description": "Any preconditioning protocol done immediately before the IV measurement\n- If no preconditioning was done, state this as \u2018none\u2019\n- If more than one preconditioning protocol was conducted in parallel, separate them with semicolons\n- If more than one preconditioning protocol was conducted in sequence, separate them by a double forward angel bracket (\u2018 >> \u2018)\nExample\nCooling\nHeeting\nLight soaking\nLight soaking; Potential biasing\nPotential biasing",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "preconditioning_time",
                        "description": "The duration of the preconditioning protocol\n- If there are uncertainties, only state the best estimate, e.g. write 100 and not 90-100.\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "second"
                    },
                    {
                        "name": "preconditioning_potential",
                        "description": "The potential at any potential biasing step\n- If there are uncertainties, only state the best estimate, e.g. write 100 and not 90-100.\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "volt"
                    },
                    {
                        "name": "preconditioning_light_intensity",
                        "description": "The light intensity at any light soaking step\n- If there are uncertainties, only state the best estimate, e.g. write 100 and not 90-100.\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "milliwatt / centimeter ** 2"
                    },
                    {
                        "name": "reverse_scan_Voc",
                        "description": "The open circuit potential, Voc, at the reverse voltage sweep (when U scanned from Voc to 0)\n- Give Voc in volts [V]\n- If there are uncertainties, only state the best estimate, e.g. write 1.03 and not 1.01-1.05\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "volt"
                    },
                    {
                        "name": "reverse_scan_Jsc",
                        "description": "The short circuit current, Jsc, at the reverse voltage sweep (when U scanned from Voc to 0)\n- Give Jsc in mA/cm2\n- If there are uncertainties, only state the best estimate, e.g. write 20.5 and not 19-20\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "milliampere / centimeter ** 2"
                    },
                    {
                        "name": "reverse_scan_FF",
                        "description": "The fill factor, FF, at the reverse voltage sweep (when U scanned from Voc to 0)\n- Give FF as the ratio between Vmp*Jmp/(Voc*Jsc) which gives it a value between 0 and 1\n- If there are uncertainties, only state the best estimate, e.g. write 0.73 and not 0.7-0.76\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": []
                    },
                    {
                        "name": "reverse_scan_PCE",
                        "description": "The efficiency, PCE, at the reverse voltage sweep (when U scanned from Voc to 0)\n- Give the efficiency in %\n- If there are uncertainties, only state the best estimate, e.g. write 20.5 and not 19-20\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": []
                    },
                    {
                        "name": "reverse_scan_Vmp",
                        "description": "The potential at the maximum power point, Vmp, at the reverse voltage sweep (when U scanned from Voc to 0)\n- Give Vmp in volts [V]\n- If there are uncertainties, only state the best estimate, e.g. write 1.03 and not 1.01-1.05\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "volt"
                    },
                    {
                        "name": "reverse_scan_Jmp",
                        "description": "The current density at the maximum power point, Jmp, at the reverse voltage sweep (when U scanned from Voc to 0)\n- Give Jmp in mA/cm2\n- If there are uncertainties, only state the best estimate, e.g. write 20.5 and not 19-20\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "milliampere / centimeter ** 2"
                    },
                    {
                        "name": "reverse_scan_series_resistance",
                        "description": "The series resistance as extracted from the reverse voltage sweep (when U scanned from Voc to 0)",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "centimeter ** 2 * ohm"
                    },
                    {
                        "name": "reverse_scan_shunt_resistance",
                        "description": "The shunt resistance as extracted from the reverse voltage sweep (when U scanned from Voc to 0)",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "centimeter ** 2 * ohm"
                    },
                    {
                        "name": "forward_scan_Voc",
                        "description": "The open circuit potential, Voc, at the forward voltage sweep (when U scanned from 0 to Voc)\n- Give Voc in volts [V]\n- If there are uncertainties, only state the best estimate, e.g. write 1.03 and not 1.01-1.05\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "volt"
                    },
                    {
                        "name": "forward_scan_Jsc",
                        "description": "The short circuit current, Jsc, at the forward voltage sweep (when U scanned from 0 to Voc)\n- Give Jsc in mA/cm2\n- If there are uncertainties, only state the best estimate, e.g. write 20.5 and not 19-20\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "milliampere / centimeter ** 2"
                    },
                    {
                        "name": "forward_scan_FF",
                        "description": "The fill factor, FF, at the forward voltage sweep (when U scanned from 0 to Voc)\n- Give FF as the ratio between Vmp*Jmp/(Voc*Jsc) which gives it a value between 0 and 1\n- If there are uncertainties, only state the best estimate, e.g. write 0.73 and not 0.7-0.76\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": []
                    },
                    {
                        "name": "forward_scan_PCE",
                        "description": "The efficiency, PCE, at the forward voltage sweep (when U scanned from 0 to Voc)\n- Give the efficiency in %\n- If there are uncertainties, only state the best estimate, e.g. write 20.5 and not 19-20\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": []
                    },
                    {
                        "name": "forward_scan_Vmp",
                        "description": "The potential at the maximum power point, Vmp, at the forward voltage sweep (when U scanned from 0 to Voc)\n- Give Vmp in volts [V]\n- If there are uncertainties, only state the best estimate, e.g. write 1.03 and not 1.01-1.05\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "volt"
                    },
                    {
                        "name": "forward_scan_Jmp",
                        "description": "The current density at the maximum power point, Jmp, at the forward voltage sweep (when U scanned from 0 to Voc)\n- Give Jmp in mA/cm2\n- If there are uncertainties, only state the best estimate, e.g. write 20.5 and not 19-20\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "milliampere / centimeter ** 2"
                    },
                    {
                        "name": "forward_scan_series_resistance",
                        "description": "The series resistance as extracted from the forward voltage sweep (when U scanned from 0 to Voc)",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "centimeter ** 2 * ohm"
                    },
                    {
                        "name": "forward_scan_shunt_resistance",
                        "description": "The shunt resistance as extracted from the forward voltage sweep (when U scanned from 0 to Voc)",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "centimeter ** 2 * ohm"
                    },
                    {
                        "name": "link_raw_data",
                        "description": "A link to where the data file for the IV-data is stored\n- This is a beta feature. The plan is to create a file repository where the raw files for IV data can be stored and disseminated. With the link and associated protocols, it should be possible to programmatically access and analyse the raw IV-data.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "default_Voc",
                        "description": "Open circuit voltage.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "volt"
                    },
                    {
                        "name": "default_Jsc",
                        "description": "Short circuit current density.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "milliampere / centimeter ** 2"
                    },
                    {
                        "name": "default_FF",
                        "description": "Fill factor.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": []
                    },
                    {
                        "name": "default_PCE",
                        "description": "Power conversion efficiency.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": []
                    },
                    {
                        "name": "default_Voc_scan_direction",
                        "description": "nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "default_Jsc_scan_direction",
                        "description": "nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "default_FF_scan_direction",
                        "description": "nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "default_PCE_scan_direction",
                        "description": "nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "hysteresis_index",
                        "description": "nan",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": []
                    }
                ],
                "sub_sections": [
                    {
                        "name": "jv_curve",
                        "sub_section": {
                            "name": "JVcurve",
                            "description": "Section describing a current density, voltage curve.",
                            "quantities": [
                                {
                                    "name": "n_values",
                                    "type": {
                                        "type_kind": "python",
                                        "type_data": "int"
                                    },
                                    "virtual": true,
                                    "shape": []
                                },
                                {
                                    "name": "cell_name",
                                    "description": "Cell identification name.",
                                    "type": {
                                        "type_kind": "python",
                                        "type_data": "str"
                                    },
                                    "shape": []
                                },
                                {
                                    "name": "current_density",
                                    "description": "Current density array of the *JV* curve.",
                                    "type": {
                                        "type_kind": "numpy",
                                        "type_data": "float64"
                                    },
                                    "shape": [
                                        "n_values"
                                    ],
                                    "unit": "milliampere / centimeter ** 2"
                                },
                                {
                                    "name": "voltage",
                                    "description": "Voltage array of the of the *JV* curve.",
                                    "type": {
                                        "type_kind": "numpy",
                                        "type_data": "float64"
                                    },
                                    "shape": [
                                        "n_values"
                                    ],
                                    "unit": "volt"
                                }
                            ],
                            "sub_sections": []
                        },
                        "repeats": true
                    }
                ]
            }
        },
        {
            "name": "stabilised",
            "sub_section": {
                "name": "Stabilised",
                "description": "A section describing if a stabilised efficiency has been measured in the solar cell.",
                "quantities": [
                    {
                        "name": "performance_measured",
                        "description": "TRUE if a stabilised cell efficiency has been measured\n- A stabilised efficiency requires a continuous measurement. Measuring an IV-curve, storing the cell in the dark for a while, and then measure a new IV-curve does thus not count as a stabilised efficiency measurement.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "performance_procedure",
                        "description": "The Potentiostatic load condition during the stabilised performance measurement\nExamples:\nConstant current\nConstant potential\nMPPT\nPassive resistance\nShort circuit",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "performance_procedure_metrics",
                        "description": "The metrics associated to the load condition in the previous filed\n- For measurement under constant current, state the current in mA/cm2\n- For measurement under constant potential. State the potential in V\n- For a measurement under constant resistive load, state the resistance in ohm",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "performance_measurement_time",
                        "description": "The duration of the stabilised performance measurement.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "minute"
                    },
                    {
                        "name": "performance_PCE",
                        "description": "The stabilised efficiency, PCE\n- Give the efficiency in %\n- If there are uncertainties, only state the best estimate, e.g. write 20.5 and not 19-20\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": []
                    },
                    {
                        "name": "performance_Vmp",
                        "description": "The stabilised Vmp\n- Give Vmp in volts [V]\n- If there are uncertainties, only state the best estimate, e.g. write 1.03 and not 1.01-1.05\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "volt"
                    },
                    {
                        "name": "performance_Jmp",
                        "description": "The stabilised Jmp\n- Give Jmp in mA/cm2\n- If there are uncertainties, only state the best estimate, e.g. write 20.5 and not 19-20\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "milliampere / centimeter ** 2"
                    },
                    {
                        "name": "performance_link_raw_data",
                        "description": "A link to where the data file for the stability measurement is stored\n- This is a beta feature. The plan is to create a file repository where the raw files for IV data can be stored and disseminated. With the link and associated protocols, it should be possible to programmatically access and analyse the raw IV-data.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    }
                ],
                "sub_sections": []
            }
        },
        {
            "name": "eqe",
            "sub_section": {
                "name": "EQE",
                "description": "A section describing the External Quantum Efficiency **EQE** of the solar cell and additional parameteres derived from it. If used as an ELN, a file containing\nthe EQE spectrum in columns can be uploaded in the quantity `data_file` to process\nautomatic calculations of several parameteres like the `bandgap` or `Urbach energy`.",
                "quantities": [
                    {
                        "name": "eqe_data_file",
                        "description": "Drop here your eqe file and click save for processing.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "header_lines",
                        "description": "Number of header lines in the file.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "int64"
                        },
                        "default": 0,
                        "shape": []
                    },
                    {
                        "name": "measured",
                        "description": "TRUE if the external quantum efficiency has been measured",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "light_bias",
                        "description": "The light intensity of any bias light during the EQE measurement\n- If there are uncertainties, only state the best estimate, e.g. write 100 and not 90-100.\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "milliwatt / centimeter ** 2"
                    },
                    {
                        "name": "bandgap_eqe",
                        "description": "Bandgap derived form the eqe in eV.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "electron_volt"
                    },
                    {
                        "name": "integrated_Jsc",
                        "description": "The integrated current from the EQE measurement\n- Give Jsc in mA/cm2\n- If there are uncertainties, only state the best estimate, e.g. write 20.5 and not 19-20\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "milliampere / centimeter ** 2"
                    },
                    {
                        "name": "integrated_J0rad",
                        "description": "The integrated J<sub>{0, Rad}</sub> from the EQE measurement\n- Give J<sub>{0, Rad}</sub> in mA/cm2\n- If there are uncertainties, only state the best estimate, e.g. write 20.5 and not 19-20\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "milliampere / centimeter ** 2"
                    },
                    {
                        "name": "voc_rad",
                        "description": "Radiative V<sub>oc</sub> derived from the eqe in V.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "volt"
                    },
                    {
                        "name": "urbach_energy",
                        "description": "Urbach energy fitted from the eqe in eV.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "electron_volt"
                    },
                    {
                        "name": "n_values",
                        "type": {
                            "type_kind": "python",
                            "type_data": "int"
                        },
                        "virtual": true,
                        "shape": []
                    },
                    {
                        "name": "n_raw_values",
                        "type": {
                            "type_kind": "python",
                            "type_data": "int"
                        },
                        "virtual": true,
                        "shape": []
                    },
                    {
                        "name": "raw_eqe_array",
                        "description": "EQE array of the spectrum",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [
                            "n_raw_values"
                        ]
                    },
                    {
                        "name": "raw_photon_energy_array",
                        "description": "Raw Photon energy array of the eqe spectrum",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [
                            "n_raw_values"
                        ],
                        "unit": "electron_volt"
                    },
                    {
                        "name": "raw_wavelength_array",
                        "description": "Raw wavelength array of the eqe spectrum",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [
                            "n_raw_values"
                        ],
                        "unit": "nanometer"
                    },
                    {
                        "name": "eqe_array",
                        "description": "EQE array of the spectrum",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [
                            "n_values"
                        ]
                    },
                    {
                        "name": "wavelength_array",
                        "description": "Interpolated/extrapolated wavelength array with *E<sub>u</sub>* of the eqe spectrum",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [
                            "n_values"
                        ],
                        "unit": "nanometer"
                    },
                    {
                        "name": "photon_energy_array",
                        "description": "Interpolated/extrapolated photon energy array with a *E<sub>u</sub>*  of the eqe spectrum",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [
                            "n_values"
                        ],
                        "unit": "electron_volt"
                    },
                    {
                        "name": "link_raw_data",
                        "description": "A link to where the data file for the EQE measurement is stored\n- This is a beta feature. The plan is to create a file repository where the raw files for IV data can be stored and disseminated. With the link and associated protocols, it should be possible to programmatically access and analyse the raw IV-data.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    }
                ],
                "sub_sections": []
            }
        },
        {
            "name": "stability",
            "sub_section": {
                "name": "Stability",
                "description": "A section decsirbing the stability measurements performed in the device.",
                "quantities": [
                    {
                        "name": "measured",
                        "description": "TRUE if some kind of stability measurement has been done.\n- There is no sharp boundary between a stability measurement and a measurement of stabilised efficiency. Generally, a measurement under a few minutes is considered as a measurement of stabilised efficiency, whereas a stability measurement is sufficiently long for degradation to be seen (unless the device is really good)",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "protocol",
                        "description": "The stability protocol used for the stability measurement.\n- For a more detailed discussion on protocols and standard nomenclature for stability measurements, please see the following paper:\no Consensus statement for stability assessment and reporting for perovskite photovoltaics based on ISOS procedures byM. V. Khenkin et al. Nat. Energ. 2020. DOI10.1038/s41560-019-0529-5\nExample:\nISOS-D-1\nISOS-D-1I\nISOS-L-2\nISOS-T-3\nIEC 61215",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "average_over_n_number_of_cells",
                        "description": "The number of cells the reported stability data is based on.\n- The preferred way to enter data is to give every individual cell its own entry in the data template/data base. If that is done, the data is an average over 1 cell.\n- If the reported stability data is not the data from one individual cell, but an average over N cells. Give the number of cells.\n- If the reported value is an average, but it is unknown over how many cells the value has been averaged (and no good estimate is available), state the number of cells as 2, which is the smallest number of cells that qualifies for an averaging procedure.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "int64"
                        },
                        "shape": []
                    },
                    {
                        "name": "light_source_type",
                        "description": "The type of light source used during the stability measurement\n- This category was included after the projects initial phase wherefor the list of reported categories is\nshort. Thus, be prepared to expand the given list of alternatives in the data template.\nExample:\nLaser\nMetal halide\nOutdoor\nSolar simulator\nSulfur plasma\nWhite LED\nXenon plasma",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "light_source_brand_name",
                        "description": "The brand name and model number of the light source/solar simulator used\n- This category was included after the projects initial phase wherefor the list of reported categories is\nshort. Thus, be prepared to expand the given list of alternatives in the data template.\nExample:\nNewport model 91192\nNewport AAA\nAtlas suntest",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "light_source_simulator_class",
                        "description": "The class of the solar simulator\n- A three-letter code of As, Bs, and Cs. The order of the letters represents the quality ofspectral match, spatial non-uniformity, and temporal instability\nExample\nAAA\nABB\nCAB",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "light_intensity",
                        "description": "The light intensity during the stability measurement\n- If there are uncertainties, only state the best estimate, e.g. write 100 and not 90-100.\n- Standard AM 1.5 illumination correspond to 100 mW/cm2\n- If you need to convert from illumination given in lux; at 550 nm, 1 mW/cm2 corresponds to 6830 lux",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "milliwatt / centimeter ** 2"
                    },
                    {
                        "name": "light_spectra",
                        "description": "The light spectrum used (or simulated as best as possible) during the stability measurement\n- For an unspecified light spectra (that not is dark), state this as \u2018Light\u2019\nExample\nAM 1.0\nAM 1.5\nIndoor light\nMonochromatic\nOutdoor\nUV",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "light_wavelength_range",
                        "description": "The wavelength range of the light source\n- Separate the lower and upper bound by a semicolon.\n- For monochromatic light sources, only give the constant value.\n- If there are uncertainties, only state the best estimate, e.g. write 100 and not 90-100.\n- State unknown values as \u2018nan\u2019\nExample:\n330; 1000\n400; nan\n550",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "light_illumination_direction",
                        "description": "The direction of the illumination with respect to the device stack\n- If the cell is illuminated trough the substrate, state this as \u2018Substrate\u2019\n- If the cell is illuminated trough the top contact, state this as \u2018Superstrate\u2019\n- For back contacted cells illuminated from the non-contacted side, state this as \u2018Superstrate\u2019\nExample\nSubstrate\nSuperstrate",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "light_load_condition",
                        "description": "The load situation of the illumination during the stability measurement.\n- If the illumination is constant during the entire stability measurement, or if the cell is stored in the dark, state this as \u2018Constant\u2019.\n- If the situation periodically is interrupted by IV-measurements, continue to consider the load condition as constant\n- If there is a cycling between dark and light, state this as \u2018Cycled\u2019\n- If the illumination varies in an uncontrolled way, state this as \u2018Uncontrolled\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is\nshort. Thus, be prepared to expand the given list of alternatives in the data template.\nExample:\nConstant\nCycled\nDay-Night cycle\nUncontrolled",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "light_cycling_times",
                        "description": "If the illumination load is cycled during the stability measurement, state the time in low light followed by the time in high light for the cycling period.\n- If not applicable, leave blank\nExample\n12; 12\n6; 10\nnan; nan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "light_UV_filter",
                        "description": "TRUE if a UV-filter of any kind was placed between the illumination source and the device during the stability measurement.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "potential_bias_load_condition",
                        "description": "The Potentiostatic load condition during the stability measurement\n- When the cell is not connected to anything, state this as \u2018Open circuit\u2019\nExamples:\nConstant current\nConstant potential\nMPPT\nOpen circuit\nPassive resistance\nShort circuit",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "potential_bias_range",
                        "description": "The potential range during the stability measurement\n- Separate the lower and upper bound by a semicolon.\n- For constant values, state only that value.\n- For open circuit conditions, state this as \u2018nan\u2019\n- If there are uncertainties, only state the best estimate, e.g. write 1 and not 0.90-1.1\n- State unknown values as \u2018nan\u2019\nExample:\n0.9; 1.02\n1.5\nnan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "potential_bias_passive_resistance",
                        "description": "The passive resistance in the measurement circuit if a resistor was used\n- Give the value in ohm\n- If there are uncertainties, only state the best estimate, e.g. write 1.03 and not 1.01-1.05\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "ohm"
                    },
                    {
                        "name": "temperature_load_condition",
                        "description": "The load situation of the temperature during the stability measurement.\n- If the temperature is constant during the entire stability measurement, state this as \u2018Constant\u2019.\n- If there is a cycling between colder and hotter conditions, state this as \u2018Cycled\u2019\n- If the temperature varies in an uncontrolled way, state this as \u2018Uncontrolled\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is\nshort. Thus, be prepared to expand the given list of alternatives in the data template.\nExample:\nConstant\nUncontrolled\nCycled",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "temperature_range",
                        "description": "The temperature range during the stability measurement\n- Separate the lower and upper bound by a semicolon.\n- For constant values, state only that value.\n- If there are uncertainties, only state the best estimate, e.g. write 1 and not 0.90-1.1\n- State unknown values as \u2018nan\u2019\nExample:\n30\n25; 85\nnan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "temperature_cycling_times",
                        "description": "If the temperature is cycled during the stability measurement, state the time in low temperature followed by the time in high temperature for the cycling period.\n- If not applicable, leave blank\n- Separate the lower and upper bound by a semicolon.\n- If there are uncertainties, only state the best estimate, e.g. write 1 and not 0.90-1.1\n- State unknown values as \u2018nan\u2019\nExample:\n2; 2\n0.5; 10",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "temperature_ramp_speed",
                        "description": "The temperature ramp speed\n- If there are uncertainties, only state the best estimate, e.g. write 1.03 and not 1.01-1.05\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "degree_Celsius / minute"
                    },
                    {
                        "name": "atmosphere",
                        "description": "The atmosphere in which the stability measurement is conducted\n- If the atmosphere is a mixture of different gases, e.g. A and B, list the gases in alphabetic order and separate them with semicolons, as in (A; B)\n- \u201cDry air\u201d represent air with low relative humidity but where the relative humidity is not known\n- \u201cAmbient\u201d represent air where the relative humidity is not known. For ambient conditions where the relative humidity is known, state this as \u201cAir\u201d\n- \u201cVacuum\u201d (of unspecified pressure) is for this purpose considered as an atmospheric gas\nExample\nAir\nN2\nVacuum",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "atmosphere_oxygen_concentration",
                        "description": "The oxygen concentration in the atmosphere\n- If unknown, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": []
                    },
                    {
                        "name": "relative_humidity_load_conditions",
                        "description": "The load situation of the relative humidity during the stability measurement.\n- If the relative humidity is constant during the entire stability measurement, state this as \u2018Constant\u2019.\n- If there is a cycling between dryer and damper conditions, state this as \u2018Cycled\u2019\n- If the relative humidity varies in an uncontrolled way, i.e. the cell is operated under ambient conditions, state this as \u2018Ambient\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is\nshort. Thus, be prepared to expand the given list of alternatives in the data template.\nExample\nAmbient\nControlled\nCycled",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "relative_humidity_range",
                        "description": "The relative humidity range during the stability measurement\n- Separate the lower and upper bound by a semicolon.\n- For constant values, state only that value.\n- If there are uncertainties, only state the best estimate, e.g. write 1 and not 0.90-1.1\n- State unknown values as \u2018nan\u2019\nExample:\n45\n35; 65\nnan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "relative_humidity_average_value",
                        "description": "The average relative humidity during the stability measurement.\n- If there are uncertainties, only state the best estimate, e.g. write 1 and not 0.90-1.1\n- If unknown, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": []
                    },
                    {
                        "name": "time_total_exposure",
                        "description": "The total duration of the stability measurement.\n- If there are uncertainties, only state the best estimate, e.g. write 1000 and not 950-1050",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "hour"
                    },
                    {
                        "name": "periodic_JV_measurements",
                        "description": "TRUE if the stability measurement periodically is interrupted for JV-measurements. A typical example is a cell that is stored in the dark and once in a wile is take out from storage for an IV-measurement.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "periodic_JV_measurements_time_between_jv",
                        "description": "The average time between JV-measurement during the stability measurement.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "PCE_initial_value",
                        "description": "The efficiency, PCE, of the cell before the stability measurement routine starts\n- Give the efficiency in %\n- If there are uncertainties, only state the best estimate, e.g. write 20.5 and not 19-20\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": []
                    },
                    {
                        "name": "PCE_burn_in_observed",
                        "description": "TRUE if the performance has a relatively fast initial decay after which the decay rate stabilises at a lower level.\n- There are no sharp boundary between an initial burn in phase an a catastrophic failure, but if the performance of the cell quickly degrade by more than half, it is stretching it a bit to label this as an initial burn in phase.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "PCE_end_of_experiment",
                        "description": "The efficiency, PCE, of the cell at the end of the stability routine\n- Give the efficiency in %\n- If there are uncertainties, only state the best estimate, e.g. write 20.5 and not 19-20\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": []
                    },
                    {
                        "name": "PCE_T95",
                        "description": "The time after which the cell performance has degraded by 5 % with respect to the initial performance.\n- If there are uncertainties, only state the best estimate, e.g. write 1000 and not 950-1050\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "hour"
                    },
                    {
                        "name": "PCE_Ts95",
                        "description": "The time after which the cell performance has degraded by 5 % with respect to the performance after any initial burn in phase.\n- If there are uncertainties, only state the best estimate, e.g. write 1000 and not 950-1050\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "hour"
                    },
                    {
                        "name": "PCE_T80",
                        "description": "The time after which the cell performance has degraded by 20 % with respect to the initial performance.\n- If there are uncertainties, only state the best estimate, e.g. write 1000 and not 950-1050\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "hour"
                    },
                    {
                        "name": "PCE_Ts80",
                        "description": "The time after which the cell performance has degraded by 20 % with respect to the performance after any initial burn in phase.\n- If there are uncertainties, only state the best estimate, e.g. write 1000 and not 950-1050\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "hour"
                    },
                    {
                        "name": "PCE_Te80",
                        "description": "An estimated T80 for cells that were not measured sufficiently long for them to degrade by 20 %. with respect to the initial performance.\n- This value will by definition have a significant uncertainty to it, as it is not measured but extrapolated under the assumption linearity but without a detailed and stabilised extrapolation protocol. This estimate is, however, not without value as it enables a rough comparison between all cells for with the stability has been measured.\n- If there is an experimental T80, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "hour"
                    },
                    {
                        "name": "PCE_Tse80",
                        "description": "An estimated T80s for cells that was not measured sufficiently long for them to degrade by 20 %. with respect to the performance after any initial burn in phase.\n- This value will by definition have a significant uncertainty to it, as it is not measured but extrapolated under the assumption linearity but without a detailed and stabilised extrapolation protocol. This estimate is, however, not without value as it enables a ruff comparison between all cells for with the stability has been measured.\n- If there is an experimental T80s, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "hour"
                    },
                    {
                        "name": "PCE_after_1000_h",
                        "description": "The efficiency, PCE, of the cell after 1000 hours\n- Give the efficiency in %\n- If there are uncertainties, only state the best estimate, e.g. write 20.5 and not 19-20\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": []
                    },
                    {
                        "name": "lifetime_energy_yield",
                        "description": "The lifetime energy yield\n- If there are uncertainties, only state the best estimate, e.g. write 20.5 and not 19-20\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "hour * kilowatt / meter ** 2"
                    },
                    {
                        "name": "flexible_cell_number_of_bending_cycles",
                        "description": "Number of bending cycles for a flexible cell in a mechanical stability test",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "int64"
                        },
                        "shape": []
                    },
                    {
                        "name": "flexible_cell_bending_radius",
                        "description": "The bending radius of the flexible cell during the mechanical stability test",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "degree"
                    },
                    {
                        "name": "flexible_cell_PCE_initial_value",
                        "description": "The efficiency, PCE, of the cell before the mechanical stability measurement routine starts\n- Give the efficiency in %\n- If there are uncertainties, only state the best estimate, e.g. write 20.5 and not 19-20\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": []
                    },
                    {
                        "name": "flexible_cell_PCE_end_of_experiment",
                        "description": "The efficiency, PCE, of the cell after the mechanical stability measurement routine\n- Give the efficiency in %\n- If there are uncertainties, only state the best estimate, e.g. write 20.5 and not 19-20\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": []
                    },
                    {
                        "name": "link_raw_data_for_stability_trace",
                        "description": "A link to where the data file for the stability data is stored\n- This is a beta feature. The plan is to create a file repository where the raw files for stability data can be stored and disseminated. With the link and associated protocols, it should be possible to programmatically access and analyse the raw stability data.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    }
                ],
                "sub_sections": []
            }
        },
        {
            "name": "outdoor",
            "sub_section": {
                "name": "Outdoor",
                "description": "A section describing measurements performed in outdoor conditions",
                "quantities": [
                    {
                        "name": "tested",
                        "description": "TRUE if the performance of the cell has been tested outdoors.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "protocol",
                        "description": "The protocol used for the outdoor testing.\n- For a more detailed discussion on protocols and standard nomenclature for stability measurements, please see the following paper:\no Consensus statement for stability assessment and reporting for perovskite photovoltaics based on ISOS procedures byM. V. Khenkin et al. Nat. Energ. 2020. DOI10.1038/s41560-019-0529-5\nExample:\nIEC 61853-1\nISOS-O-1\nISOS-O-2\nISOS-O-3",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "average_over_n_number_of_cells",
                        "description": "The number of cells the reported outdoor data is based on.\nExample:\n- The preferred way to enter data is to give every individual cell its own entry in the data template/data base. If that is done, the data is an average over 1 cell.\n- If the reported data is not the data from one individual cell, but an average over N cells. Give the number of cells.\n- If the reported value is an average, but it is unknown over how many cells the value has been averaged (and no good estimate is available), state the number of cells as 2, which is the smallest number of cells that qualifies for an averaging procedure.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "int64"
                        },
                        "shape": []
                    },
                    {
                        "name": "location_country",
                        "description": "The country where the outdoor testing was occurring\n- For measurements conducted in space, state this as \u2019Space International\u2019\nExample:\nSweden\nSwitzerland\nSpace International",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "location_city",
                        "description": "The city where the outdoor testing was occurring",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "location_coordinates",
                        "description": "The coordinates fort the places where the outdoor testing was occurring.\n- Use decimal degrees (DD) as the format.\nExample:\n59.839116; 17.647979\n52.428150; 13.532134",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "location_climate_zone",
                        "description": "The climate zone for the places where the outdoor testing was occurring.\nExample:\nCold\nDesert\nSubtropical\nTeperate\nTropical",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "installation_tilt",
                        "description": "The tilt of the installed solar cell.\n- A module lying flat on the ground have a tilt of 0\n- A module standing straight up has a tilt of 90",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "degree"
                    },
                    {
                        "name": "installation_cardinal_direction",
                        "description": "The cardinal direction of the installed solar cell.\n- North is 0\n- East is 90\n- South is 180\n- West is 270",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "degree"
                    },
                    {
                        "name": "installation_number_of_solar_tracking_axis",
                        "description": "The number of tracking axis in the installation.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "int64"
                        },
                        "shape": []
                    },
                    {
                        "name": "time_season",
                        "description": "The time of year the outdoor testing was occurring.\n- Order the seasons in alphabetic order and separate them with semicolons.\n- For time periods longer than a year, state all four seasons once.\nExample:\nAutumn\nAutumn; Summer\nAutumn; Spring, Winter\nAutumn; Spring; Summer; Winter\nSpring; Winter",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "time_start",
                        "description": "The starting time for the outdoor measurement.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "time_end",
                        "description": "The ending time for the outdoor measurement.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "time_total_exposure",
                        "description": "The total duration of the outdoor measurement in days.\n- If there are uncertainties, only state the best estimate, e.g. write 1000 and not 950-1050",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": []
                    },
                    {
                        "name": "potential_bias_load_condition",
                        "description": "The Potentiostatic load condition during the outdoor measurement\n- When the cell is not connected to anything, state this as \u2018Open circuit\u2019\nExamples:\nConstant current\nConstant potential\nMPPT\nOpen circuit\nPassive resistance\nShort circuit",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "potential_bias_range",
                        "description": "The potential range during the outdoor measurement\n- Separate the lower and upper bound by a semicolon.\n- For constant values, state only that value.\n- For open circuit conditions, state this as \u2018nan\u2019\n- If there are uncertainties, only state the best estimate, e.g. write 1 and not 0.90-1.1\n- State unknown values as \u2018nan\u2019\nExample:\n0.9; 1.02\n1.5\nnan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "potential_bias_passive_resistance",
                        "description": "The passive resistance in the measurement circuit if a resistor was used\n- Give the value in ohm\n- If there are uncertainties, only state the best estimate, e.g. write 1.03 and not 1.01-1.05\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "ohm"
                    },
                    {
                        "name": "temperature_load_condition",
                        "description": "The load situation of the temperature during the outdoor measurement.\n- If the temperature is constant during the entire stability measurement, state this as \u2018Constant\u2019.\n- If there is a cycling between colder and hotter conditions, state this as \u2018Cycled\u2019\n- If the temperature varies in an uncontrolled way, state this as \u2018Uncontrolled\u2019\n- This category was included after the projects initial phase wherefor the list of reported categories is\nshort. Thus, be prepared to expand the given list of alternatives in the data template.\nExample:\nConstant\nUncontrolled\nCycled",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "temperature_range",
                        "description": "The temperature range during the outdoor measurement\n- Separate the lower and upper bound by a semicolon.\n- For constant values, state only that value.\n- If there are uncertainties, only state the best estimate, e.g. write 1 and not 0.90-1.1\n- State unknown values as \u2018nan\u2019\nExample:\n30\n-10; 85\nnan",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "temperature_tmodule",
                        "description": "The effective temperature of the module during peak hours.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "degree_Celsius"
                    },
                    {
                        "name": "periodic_JV_measurements",
                        "description": "TRUE if the outdoor measurement periodically is interrupted for JV-measurements.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "periodic_JV_measurements_time_between_measurements",
                        "description": "The average time between JV-measurement during the outdoor measurement.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "hour"
                    },
                    {
                        "name": "PCE_initial_value",
                        "description": "The efficiency, PCE, of the cell before the measurement routine starts\n- Give the efficiency in %\n- If there are uncertainties, only state the best estimate, e.g. write 20.5 and not 19-20\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": []
                    },
                    {
                        "name": "PCE_burn_in_observed",
                        "description": "TRUE if the performance has a relatively fast initial decay after which the decay rate stabilises at a lower level.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "PCE_end_of_experiment",
                        "description": "The efficiency, PCE, of the cell at the end of the experiment\n- Give the efficiency in %\n- If there are uncertainties, only state the best estimate, e.g. write 20.5 and not 19-20\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": []
                    },
                    {
                        "name": "PCE_T95",
                        "description": "The time after which the cell performance has degraded by 5 % with respect to the initial performance.\n- If there are uncertainties, only state the best estimate, e.g. write 1000 and not 950-1050\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "hour"
                    },
                    {
                        "name": "PCE_Ts95",
                        "description": "The time after which the cell performance has degraded by 5 % with respect to the performance after any initial burn in phase.\n- If there are uncertainties, only state the best estimate, e.g. write 1000 and not 950-1050\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "hour"
                    },
                    {
                        "name": "PCE_T80",
                        "description": "The time after which the cell performance has degraded by 20 % with respect to the initial performance.\n- If there are uncertainties, only state the best estimate, e.g. write 1000 and not 950-1050\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "hour"
                    },
                    {
                        "name": "PCE_Ts80",
                        "description": "The time after which the cell performance has degraded by 20 % with respect to the performance after any initial burn in phase.\n- If there are uncertainties, only state the best estimate, e.g. write 1000 and not 950-1050\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "hour"
                    },
                    {
                        "name": "PCE_Te80",
                        "description": "An estimated T80 for cells that was not measured sufficiently long for them to degrade by 20 %. with respect to the initial performance.\n- This value will by definition have a significant uncertainty to it, as it is not measured but extrapolated under the assumption linearity but without a detailed and stabilised extrapolation protocol. This estimate is, however, not without value as it enables a ruff comparison between all cells for with the stability has been measured.\n- If there is an experimental T80, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "hour"
                    },
                    {
                        "name": "PCE_Tse80",
                        "description": "An estimated T80s for cells that was not measured sufficiently long for them to degrade by 20 %. with respect to the performance after any initial burn in phase.\n- This value will by definition have a significant uncertainty to it, as it is not measured but extrapolated under the assumption linearity but without a detailed and stabilised extrapolation protocol. This estimate is, however, not without value as it enables a ruff comparison between all cells for with the stability has been measured.\n- If there is an experimental T80s, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": [],
                        "unit": "hour"
                    },
                    {
                        "name": "PCE_after_1000_h",
                        "description": "The efficiency, PCE, of the cell after 1000 hours\n- Give the efficiency in %\n- If there are uncertainties, only state the best estimate, e.g. write 20.5 and not 19-20\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": []
                    },
                    {
                        "name": "power_generated",
                        "description": "The yearly power generated during the measurement period in kWh/year/m^2.\n- If there are uncertainties, only state the best estimate, e.g. write 20.5 and not 19-20\n- If unknown or not applicable, leave this field empty.",
                        "type": {
                            "type_kind": "numpy",
                            "type_data": "float64"
                        },
                        "shape": []
                    },
                    {
                        "name": "link_raw_data_for_outdoor_trace",
                        "description": "A link to where the data file for the measurement is stored\n- This is a beta feature. The plan is to create a file repository where the raw files for stability data can be stored and disseminated. With the link and associated protocols, it should be possible to programmatically access and analyse the raw data.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "detaild_weather_data_available",
                        "description": "TRUE if detailed weather data is available for the measurement period",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "link_detailed_weather_data",
                        "description": "A link to where the data file for the measurement is stored\n- This is a beta feature. The plan is to create a file repository where the raw files for stability data can be stored and disseminated. With the link and associated protocols, it should be possible to programmatically access and analyse the raw data.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "spectral_data_available",
                        "description": "TRUE measured spectral data are available for the measurement period",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "link_spectral_data",
                        "description": "A link to where the data file for the measurement is stored\n- This is a beta feature. The plan is to create a file repository where the raw files for stability data can be stored and disseminated. With the link and associated protocols, it should be possible to programmatically access and analyse the raw data.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    },
                    {
                        "name": "irradiance_measured",
                        "description": "TRUE measured irradiance data are available for the measurement period",
                        "type": {
                            "type_kind": "python",
                            "type_data": "bool"
                        },
                        "shape": []
                    },
                    {
                        "name": "link_irradiance_data",
                        "description": "A link to where the data file for the measurement is stored\n- This is a beta feature. The plan is to create a file repository where the raw files for stability data can be stored and disseminated. With the link and associated protocols, it should be possible to programmatically access and analyse the raw data.",
                        "type": {
                            "type_kind": "python",
                            "type_data": "str"
                        },
                        "shape": []
                    }
                ],
                "sub_sections": []
            }
        }
    ],
    "quantities": []
}